/*
 * Copyright 2000-2013 JetBrains s.r.o.
 * Copyright 2014-2014 AS3Boyan
 * Copyright 2014-2014 Elias Ku
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* The following code was generated by JFlex 1.4.3 on 05.11.14 18:44 */

package com.intellij.plugins.haxe.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 05.11.14 18:44 from the specification file
 * <tt>/home/as3boyan/IdeaProjects/intellij-haxe-EBatTiVo/src/com/intellij/plugins/haxe/lang/lexer/haxe.flex</tt>
 */
public class _HaxeLexer implements FlexLexer, HaxeTokenTypes, HaxeTokenTypeSets {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int APOS_STRING = 4;
  public static final int YYINITIAL = 0;
  public static final int LONG_TEMPLATE_ENTRY = 8;
  public static final int QUO_STRING = 2;
  public static final int SHORT_TEMPLATE_ENTRY = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\17\1\104\1\0\1\1\1\6\22\0\1\17\1\75\1\40"+
    "\1\14\1\7\1\103\1\100\1\41\1\20\1\21\1\13\1\36\1\71"+
    "\1\72\1\37\1\12\1\30\7\27\2\26\1\11\1\70\1\101\1\74"+
    "\1\73\1\76\1\10\1\25\1\64\2\25\1\35\1\25\21\2\1\32"+
    "\2\2\1\66\1\5\1\67\1\102\1\3\1\0\1\50\1\46\1\56"+
    "\1\52\1\22\1\16\1\57\1\61\1\15\1\2\1\51\1\23\1\34"+
    "\1\44\1\60\1\55\1\65\1\47\1\24\1\54\1\53\1\62\1\45"+
    "\1\31\1\63\1\2\1\42\1\77\1\43\1\33\53\0\1\2\12\0"+
    "\1\2\4\0\1\2\5\0\27\2\1\0\37\2\1\0\u01ca\2\4\0"+
    "\14\2\16\0\5\2\7\0\1\2\1\0\1\2\201\0\5\2\1\0"+
    "\2\2\2\0\4\2\10\0\1\2\1\0\3\2\1\0\1\2\1\0"+
    "\24\2\1\0\123\2\1\0\213\2\10\0\236\2\11\0\46\2\2\0"+
    "\1\2\7\0\47\2\110\0\33\2\5\0\3\2\55\0\53\2\25\0"+
    "\12\4\4\0\2\2\1\0\143\2\1\0\1\2\17\0\2\2\7\0"+
    "\2\2\12\4\3\2\2\0\1\2\20\0\1\2\1\0\36\2\35\0"+
    "\131\2\13\0\1\2\16\0\12\4\41\2\11\0\2\2\4\0\1\2"+
    "\5\0\26\2\4\0\1\2\11\0\1\2\3\0\1\2\27\0\31\2"+
    "\253\0\66\2\3\0\1\2\22\0\1\2\7\0\12\2\4\0\12\4"+
    "\1\0\7\2\1\0\7\2\5\0\10\2\2\0\2\2\2\0\26\2"+
    "\1\0\7\2\1\0\1\2\3\0\4\2\3\0\1\2\20\0\1\2"+
    "\15\0\2\2\1\0\3\2\4\0\12\4\2\2\23\0\6\2\4\0"+
    "\2\2\2\0\26\2\1\0\7\2\1\0\2\2\1\0\2\2\1\0"+
    "\2\2\37\0\4\2\1\0\1\2\7\0\12\4\2\0\3\2\20\0"+
    "\11\2\1\0\3\2\1\0\26\2\1\0\7\2\1\0\2\2\1\0"+
    "\5\2\3\0\1\2\22\0\1\2\17\0\2\2\4\0\12\4\25\0"+
    "\10\2\2\0\2\2\2\0\26\2\1\0\7\2\1\0\2\2\1\0"+
    "\5\2\3\0\1\2\36\0\2\2\1\0\3\2\4\0\12\4\1\0"+
    "\1\2\21\0\1\2\1\0\6\2\3\0\3\2\1\0\4\2\3\0"+
    "\2\2\1\0\1\2\1\0\2\2\3\0\2\2\3\0\3\2\3\0"+
    "\14\2\26\0\1\2\25\0\12\4\25\0\10\2\1\0\3\2\1\0"+
    "\27\2\1\0\12\2\1\0\5\2\3\0\1\2\32\0\2\2\6\0"+
    "\2\2\4\0\12\4\25\0\10\2\1\0\3\2\1\0\27\2\1\0"+
    "\12\2\1\0\5\2\3\0\1\2\40\0\1\2\1\0\2\2\4\0"+
    "\12\4\1\0\2\2\22\0\10\2\1\0\3\2\1\0\51\2\2\0"+
    "\1\2\20\0\1\2\21\0\2\2\4\0\12\4\12\0\6\2\5\0"+
    "\22\2\3\0\30\2\1\0\11\2\1\0\1\2\2\0\7\2\72\0"+
    "\60\2\1\0\2\2\14\0\7\2\11\0\12\4\47\0\2\2\1\0"+
    "\1\2\2\0\2\2\1\0\1\2\2\0\1\2\6\0\4\2\1\0"+
    "\7\2\1\0\3\2\1\0\1\2\1\0\1\2\2\0\2\2\1\0"+
    "\4\2\1\0\2\2\11\0\1\2\2\0\5\2\1\0\1\2\11\0"+
    "\12\4\2\0\2\2\42\0\1\2\37\0\12\4\26\0\10\2\1\0"+
    "\44\2\33\0\5\2\163\0\53\2\24\0\1\2\12\4\6\0\6\2"+
    "\4\0\4\2\3\0\1\2\3\0\2\2\7\0\3\2\4\0\15\2"+
    "\14\0\1\2\1\0\12\4\6\0\46\2\12\0\53\2\1\0\1\2"+
    "\3\0\u0149\2\1\0\4\2\2\0\7\2\1\0\1\2\1\0\4\2"+
    "\2\0\51\2\1\0\4\2\2\0\41\2\1\0\4\2\2\0\7\2"+
    "\1\0\1\2\1\0\4\2\2\0\17\2\1\0\71\2\1\0\4\2"+
    "\2\0\103\2\45\0\20\2\20\0\125\2\14\0\u026c\2\2\0\21\2"+
    "\1\0\32\2\5\0\113\2\25\0\15\2\1\0\4\2\16\0\22\2"+
    "\16\0\22\2\16\0\15\2\1\0\3\2\17\0\64\2\43\0\1\2"+
    "\4\0\1\2\3\0\12\4\46\0\12\4\6\0\130\2\10\0\51\2"+
    "\1\0\1\2\5\0\106\2\12\0\35\2\51\0\12\4\36\2\2\0"+
    "\5\2\13\0\54\2\25\0\7\2\10\0\12\4\46\0\27\2\11\0"+
    "\65\2\53\0\12\4\6\0\12\4\15\0\1\2\135\0\57\2\21\0"+
    "\7\2\4\0\12\4\51\0\36\2\15\0\2\2\12\4\6\0\46\2"+
    "\32\0\44\2\34\0\12\4\3\0\3\2\12\4\44\2\153\0\4\2"+
    "\1\0\4\2\16\0\300\2\100\0\u0116\2\2\0\6\2\2\0\46\2"+
    "\2\0\6\2\2\0\10\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\37\2\2\0\65\2\1\0\7\2\1\0\1\2\3\0\3\2"+
    "\1\0\7\2\3\0\4\2\2\0\6\2\4\0\15\2\5\0\3\2"+
    "\1\0\7\2\164\0\1\2\15\0\1\2\20\0\15\2\145\0\1\2"+
    "\4\0\1\2\2\0\12\2\1\0\1\2\3\0\5\2\6\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\4\2\1\0\13\2\2\0\4\2"+
    "\5\0\5\2\4\0\1\2\64\0\2\2\u0a7b\0\57\2\1\0\57\2"+
    "\1\0\205\2\6\0\4\2\21\0\46\2\12\0\66\2\11\0\1\2"+
    "\20\0\27\2\11\0\7\2\1\0\7\2\1\0\7\2\1\0\7\2"+
    "\1\0\7\2\1\0\7\2\1\0\7\2\1\0\7\2\120\0\1\2"+
    "\u01d5\0\2\2\52\0\5\2\5\0\2\2\4\0\126\2\6\0\3\2"+
    "\1\0\132\2\1\0\4\2\5\0\51\2\3\0\136\2\21\0\33\2"+
    "\65\0\20\2\u0200\0\u19b6\2\112\0\u51cc\2\64\0\u048d\2\103\0\56\2"+
    "\2\0\u010d\2\3\0\20\2\12\4\2\2\24\0\57\2\20\0\31\2"+
    "\10\0\106\2\61\0\11\2\2\0\147\2\2\0\4\2\1\0\2\2"+
    "\16\0\12\2\120\0\10\2\1\0\3\2\1\0\4\2\1\0\27\2"+
    "\35\0\64\2\16\0\62\2\34\0\12\4\30\0\6\2\3\0\1\2"+
    "\4\0\12\4\34\2\12\0\27\2\31\0\35\2\7\0\57\2\34\0"+
    "\1\2\12\4\46\0\51\2\27\0\3\2\1\0\10\2\4\0\12\4"+
    "\6\0\27\2\3\0\1\2\5\0\60\2\1\0\1\2\3\0\2\2"+
    "\2\0\5\2\2\0\1\2\1\0\1\2\30\0\3\2\43\0\6\2"+
    "\2\0\6\2\2\0\6\2\11\0\7\2\1\0\7\2\221\0\43\2"+
    "\15\0\12\4\6\0\u2ba4\2\14\0\27\2\4\0\61\2\u2104\0\u012e\2"+
    "\2\0\76\2\2\0\152\2\46\0\7\2\14\0\5\2\5\0\1\2"+
    "\1\0\12\2\1\0\15\2\1\0\5\2\1\0\1\2\1\0\2\2"+
    "\1\0\2\2\1\0\154\2\41\0\u016b\2\22\0\100\2\2\0\66\2"+
    "\50\0\14\2\164\0\5\2\1\0\207\2\23\0\12\4\7\0\32\2"+
    "\6\0\32\2\13\0\131\2\3\0\6\2\2\0\6\2\2\0\6\2"+
    "\2\0\3\2\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\2\1\1\4\1\5\1\6"+
    "\1\1\2\3\1\7\1\10\2\3\2\11\1\1\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\14\3\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\36\1\40"+
    "\1\36\1\37\2\41\4\37\1\42\1\43\3\0\1\44"+
    "\1\0\1\45\1\46\1\47\1\50\2\0\1\51\1\3"+
    "\1\52\11\3\1\53\1\0\1\54\1\0\1\55\1\56"+
    "\1\0\7\3\1\57\16\3\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\36\1\76\1\77\1\41\2\0\3\100"+
    "\16\44\1\46\1\101\4\0\5\3\1\102\6\3\1\103"+
    "\1\0\1\104\1\105\1\106\13\3\1\107\13\3\1\110"+
    "\1\111\1\41\1\100\5\44\1\112\15\44\1\0\2\101"+
    "\2\0\1\113\1\0\6\3\1\114\1\3\1\115\3\3"+
    "\1\104\1\3\1\116\10\3\1\117\1\120\6\3\1\121"+
    "\1\122\3\3\1\123\23\44\1\46\1\0\2\124\1\125"+
    "\1\0\4\3\1\126\4\3\1\127\1\3\1\130\1\131"+
    "\1\132\4\3\1\133\1\3\1\134\4\3\1\135\1\136"+
    "\2\3\3\44\1\137\3\44\1\140\4\44\1\141\5\44"+
    "\1\142\2\0\1\143\1\3\1\144\1\145\3\3\1\146"+
    "\1\147\1\150\1\151\7\3\1\152\2\3\1\153\2\44"+
    "\1\154\3\44\1\155\2\44\1\156\4\44\1\124\1\0"+
    "\3\3\1\157\1\3\1\160\1\161\1\162\1\163\1\164"+
    "\1\165\2\3\1\44\1\166\1\167\1\44\1\170\4\44"+
    "\1\171\1\44\1\0\2\3\1\172\1\173\1\174\1\175"+
    "\1\44\1\176\1\177\4\44\1\3\1\200\1\201\2\44"+
    "\1\202\1\203\1\204\1\205\1\206";

  private static int [] zzUnpackAction() {
    int [] result = new int[432];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u0159\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6"+
    "\0\u0159\0\u0159\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564"+
    "\0\u05a9\0\u0159\0\u0159\0\u0159\0\u0159\0\u05ee\0\u0633\0\u0678"+
    "\0\u06bd\0\u0702\0\u0747\0\u078c\0\u07d1\0\u0816\0\u085b\0\u08a0"+
    "\0\u08e5\0\u0159\0\u0159\0\u0159\0\u0159\0\u092a\0\u0159\0\u096f"+
    "\0\u09b4\0\u0159\0\u09f9\0\u0a3e\0\u0a83\0\u0ac8\0\u0b0d\0\u0b52"+
    "\0\u0b97\0\u0bdc\0\u0159\0\u0c21\0\u0159\0\u0c66\0\u0cab\0\u0228"+
    "\0\u026d\0\u033c\0\u051f\0\u0159\0\u0159\0\u0228\0\u0cf0\0\u0d35"+
    "\0\u0d7a\0\u0dbf\0\u0e04\0\u0e49\0\u0159\0\u0159\0\u0e8e\0\u0ed3"+
    "\0\u01e3\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7\0\u102c\0\u1071\0\u10b6"+
    "\0\u10fb\0\u1140\0\u1185\0\u11ca\0\u120f\0\u1254\0\u0159\0\u1299"+
    "\0\u0159\0\u0159\0\u12de\0\u1323\0\u1368\0\u13ad\0\u13f2\0\u1437"+
    "\0\u147c\0\u14c1\0\u01e3\0\u1506\0\u154b\0\u1590\0\u15d5\0\u161a"+
    "\0\u165f\0\u16a4\0\u16e9\0\u172e\0\u1773\0\u17b8\0\u17fd\0\u1842"+
    "\0\u1887\0\u0159\0\u0159\0\u0159\0\u0159\0\u0159\0\u0159\0\u0159"+
    "\0\u0159\0\u0159\0\u0159\0\u0159\0\u18cc\0\u0159\0\u0159\0\u0159"+
    "\0\u1911\0\u0159\0\u1956\0\u199b\0\u19e0\0\u0159\0\u0d35\0\u0cf0"+
    "\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e\0\u1bc3\0\u1c08"+
    "\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c\0\u1d61\0\u1da6\0\u1deb\0\u1e30"+
    "\0\u1e75\0\u1eba\0\u1eff\0\u1f44\0\u1f89\0\u1fce\0\u2013\0\u2058"+
    "\0\u209d\0\u01e3\0\u20e2\0\u2127\0\u216c\0\u21b1\0\u21f6\0\u223b"+
    "\0\u1254\0\u2280\0\u22c5\0\u0159\0\u01e3\0\u230a\0\u234f\0\u2394"+
    "\0\u23d9\0\u241e\0\u2463\0\u24a8\0\u24ed\0\u2532\0\u2577\0\u25bc"+
    "\0\u01e3\0\u2601\0\u2646\0\u268b\0\u26d0\0\u2715\0\u275a\0\u279f"+
    "\0\u27e4\0\u2829\0\u286e\0\u28b3\0\u01e3\0\u0159\0\u28f8\0\u199b"+
    "\0\u293d\0\u2982\0\u29c7\0\u2a0c\0\u2a51\0\u0d7a\0\u2a96\0\u2adb"+
    "\0\u2b20\0\u2b65\0\u2baa\0\u2bef\0\u2c34\0\u2c79\0\u2cbe\0\u2d03"+
    "\0\u2d48\0\u2d8d\0\u2dd2\0\u2e17\0\u2e5c\0\u0159\0\u2ea1\0\u2ee6"+
    "\0\u0159\0\u2f2b\0\u2f70\0\u2fb5\0\u2ffa\0\u303f\0\u3084\0\u30c9"+
    "\0\u01e3\0\u310e\0\u01e3\0\u3153\0\u3198\0\u31dd\0\u3222\0\u3267"+
    "\0\u01e3\0\u32ac\0\u32f1\0\u3336\0\u337b\0\u33c0\0\u3405\0\u344a"+
    "\0\u348f\0\u01e3\0\u01e3\0\u34d4\0\u3519\0\u355e\0\u35a3\0\u35e8"+
    "\0\u362d\0\u01e3\0\u01e3\0\u3672\0\u36b7\0\u36fc\0\u0c66\0\u3741"+
    "\0\u3786\0\u37cb\0\u3810\0\u3855\0\u389a\0\u38df\0\u3924\0\u3969"+
    "\0\u39ae\0\u39f3\0\u3a38\0\u3a7d\0\u3ac2\0\u3b07\0\u3b4c\0\u3b91"+
    "\0\u3bd6\0\u3c1b\0\u0159\0\u3c60\0\u3ca5\0\u3cea\0\u3d2f\0\u3d74"+
    "\0\u3db9\0\u3dfe\0\u3e43\0\u3e88\0\u01e3\0\u3ecd\0\u3f12\0\u3f57"+
    "\0\u3f9c\0\u01e3\0\u3fe1\0\u01e3\0\u01e3\0\u01e3\0\u4026\0\u406b"+
    "\0\u40b0\0\u40f5\0\u01e3\0\u413a\0\u01e3\0\u417f\0\u41c4\0\u4209"+
    "\0\u424e\0\u01e3\0\u01e3\0\u4293\0\u42d8\0\u431d\0\u4362\0\u43a7"+
    "\0\u0d7a\0\u43ec\0\u4431\0\u4476\0\u0d7a\0\u44bb\0\u4500\0\u4545"+
    "\0\u458a\0\u0d7a\0\u45cf\0\u4614\0\u4659\0\u469e\0\u46e3\0\u0d7a"+
    "\0\u4728\0\u476d\0\u0159\0\u47b2\0\u01e3\0\u01e3\0\u47f7\0\u483c"+
    "\0\u4881\0\u01e3\0\u01e3\0\u01e3\0\u01e3\0\u48c6\0\u490b\0\u4950"+
    "\0\u4995\0\u49da\0\u4a1f\0\u4a64\0\u01e3\0\u4aa9\0\u4aee\0\u0d7a"+
    "\0\u4b33\0\u4b78\0\u0d7a\0\u4bbd\0\u4c02\0\u4c47\0\u0d7a\0\u4c8c"+
    "\0\u4cd1\0\u0d7a\0\u4d16\0\u4d5b\0\u4da0\0\u4de5\0\u4728\0\u4e2a"+
    "\0\u4e6f\0\u4eb4\0\u4ef9\0\u01e3\0\u4f3e\0\u01e3\0\u01e3\0\u01e3"+
    "\0\u01e3\0\u01e3\0\u01e3\0\u4f83\0\u4fc8\0\u500d\0\u0d7a\0\u0d7a"+
    "\0\u5052\0\u0d7a\0\u5097\0\u50dc\0\u5121\0\u5166\0\u0d7a\0\u51ab"+
    "\0\u51f0\0\u5235\0\u527a\0\u01e3\0\u01e3\0\u01e3\0\u01e3\0\u52bf"+
    "\0\u0d7a\0\u0d7a\0\u5304\0\u5349\0\u538e\0\u53d3\0\u5418\0\u01e3"+
    "\0\u0d7a\0\u545d\0\u54a2\0\u0d7a\0\u0d7a\0\u01e3\0\u0d7a\0\u0d7a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[432];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\2\10\1\11\1\6\1\7\1\10\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\7\1\21"+
    "\1\22\1\23\1\10\1\24\1\10\2\25\1\26\2\10"+
    "\1\27\2\10\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\10\1\43\1\44"+
    "\1\45\1\46\1\47\1\10\1\50\1\10\1\51\3\10"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\7\5\70"+
    "\1\71\1\70\1\72\30\70\1\73\44\70\5\74\1\71"+
    "\1\74\1\72\31\74\1\73\43\74\2\75\2\76\11\75"+
    "\2\76\3\75\4\76\3\75\2\76\1\75\2\76\6\75"+
    "\10\76\1\77\11\76\16\75\1\0\1\75\1\7\2\10"+
    "\1\100\1\75\1\7\1\10\1\101\1\13\1\14\1\15"+
    "\1\102\1\17\1\20\1\7\1\21\1\22\1\23\1\10"+
    "\1\24\1\10\2\25\1\26\2\10\1\103\2\10\1\30"+
    "\1\31\1\32\1\33\1\104\1\105\1\36\1\37\1\40"+
    "\1\41\1\42\1\10\1\43\1\44\1\45\1\46\1\47"+
    "\1\10\1\50\1\10\1\51\3\10\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\7\106\0\1\7\4\0\1\7"+
    "\10\0\1\7\64\0\1\7\2\0\3\10\2\0\1\10"+
    "\5\0\2\10\3\0\11\10\1\0\2\10\6\0\22\10"+
    "\23\0\1\106\15\0\1\107\3\0\3\106\4\0\1\107"+
    "\1\0\1\110\47\0\2\111\3\0\1\111\1\0\1\112"+
    "\3\0\2\111\3\0\4\111\3\0\2\111\1\0\2\111"+
    "\6\0\22\111\31\0\1\113\1\114\60\0\1\115\104\0"+
    "\1\116\25\0\1\117\4\0\1\120\64\0\3\10\2\0"+
    "\1\10\5\0\1\10\1\121\3\0\11\10\1\0\1\122"+
    "\1\10\6\0\1\123\21\10\21\0\3\10\2\0\1\10"+
    "\5\0\2\10\3\0\11\10\1\0\2\10\6\0\4\10"+
    "\1\124\2\10\1\125\4\10\1\126\5\10\21\0\3\10"+
    "\2\0\1\10\5\0\2\10\3\0\1\10\1\127\5\10"+
    "\1\130\1\10\1\0\2\10\6\0\1\131\21\10\21\0"+
    "\3\10\2\0\1\10\5\0\2\10\3\0\11\10\1\0"+
    "\2\10\6\0\1\10\1\132\5\10\1\133\1\134\11\10"+
    "\23\0\1\106\15\0\1\107\3\0\3\25\4\0\1\107"+
    "\1\0\1\110\51\0\1\106\15\0\1\107\3\0\1\106"+
    "\2\135\2\136\2\0\1\107\1\0\1\110\45\0\12\137"+
    "\1\140\72\137\36\0\1\141\35\0\1\142\14\0\1\110"+
    "\21\0\3\110\6\0\1\143\47\0\3\10\2\0\1\10"+
    "\5\0\2\10\3\0\1\144\10\10\1\0\2\10\6\0"+
    "\7\10\1\145\12\10\21\0\3\10\2\0\1\10\5\0"+
    "\2\10\3\0\11\10\1\0\2\10\6\0\15\10\1\146"+
    "\4\10\21\0\3\10\2\0\1\10\5\0\2\10\3\0"+
    "\11\10\1\0\2\10\6\0\3\10\1\147\16\10\21\0"+
    "\3\10\2\0\1\10\5\0\2\10\3\0\1\150\10\10"+
    "\1\0\2\10\6\0\22\10\21\0\3\10\2\0\1\10"+
    "\5\0\2\10\3\0\11\10\1\0\2\10\6\0\2\10"+
    "\1\151\17\10\21\0\3\10\2\0\1\10\5\0\2\10"+
    "\3\0\1\152\10\10\1\0\2\10\6\0\14\10\1\153"+
    "\2\10\1\154\2\10\21\0\3\10\2\0\1\10\5\0"+
    "\2\10\3\0\2\10\1\155\6\10\1\0\2\10\6\0"+
    "\1\156\21\10\21\0\3\10\2\0\1\10\5\0\2\10"+
    "\3\0\11\10\1\0\2\10\6\0\3\10\1\157\11\10"+
    "\1\160\1\10\1\161\2\10\21\0\3\10\2\0\1\10"+
    "\5\0\2\10\3\0\11\10\1\0\2\10\6\0\3\10"+
    "\1\162\1\163\2\10\1\164\12\10\21\0\3\10\2\0"+
    "\1\10\5\0\2\10\3\0\1\10\1\165\7\10\1\0"+
    "\2\10\6\0\4\10\1\166\7\10\1\167\5\10\21\0"+
    "\3\10\2\0\1\10\5\0\2\10\3\0\11\10\1\0"+
    "\2\10\6\0\16\10\1\170\3\10\21\0\3\10\2\0"+
    "\1\10\5\0\2\10\3\0\11\10\1\0\2\10\6\0"+
    "\4\10\1\171\15\10\111\0\1\172\1\173\1\174\103\0"+
    "\1\175\1\176\104\0\1\177\104\0\1\200\2\0\1\201"+
    "\101\0\1\202\3\0\1\203\100\0\1\204\4\0\1\205"+
    "\77\0\1\206\104\0\1\207\10\0\5\70\1\0\1\70"+
    "\1\0\30\70\1\0\44\70\6\210\1\0\75\210\3\0"+
    "\2\211\11\0\2\211\3\0\4\211\3\0\2\211\1\0"+
    "\2\211\4\0\1\212\1\0\22\211\17\0\5\74\1\0"+
    "\1\74\1\0\31\74\1\0\43\74\2\0\3\76\10\0"+
    "\2\76\3\0\11\76\1\0\2\76\6\0\22\76\21\0"+
    "\3\76\10\0\2\76\3\0\11\76\1\0\2\76\6\0"+
    "\15\76\1\213\4\76\23\0\1\214\21\0\3\214\5\0"+
    "\1\215\33\0\1\215\12\0\4\216\1\217\15\216\1\220"+
    "\3\216\3\217\4\216\1\220\1\216\1\0\45\216\2\0"+
    "\3\111\2\0\1\111\5\0\2\111\3\0\11\111\1\0"+
    "\2\111\6\0\22\111\21\0\2\111\3\0\1\111\5\0"+
    "\1\111\1\221\3\0\2\111\1\222\1\111\3\0\2\111"+
    "\1\0\1\223\1\111\6\0\1\224\1\111\1\225\1\226"+
    "\1\227\1\230\1\231\2\111\1\232\1\233\1\234\1\235"+
    "\1\236\4\111\17\0\6\113\1\0\75\113\1\0\13\237"+
    "\1\240\71\237\16\0\1\241\111\0\1\242\20\0\1\243"+
    "\2\0\1\244\37\0\3\10\2\0\1\10\5\0\2\10"+
    "\3\0\11\10\1\0\2\10\6\0\11\10\1\245\10\10"+
    "\21\0\3\10\2\0\1\10\5\0\2\10\3\0\1\10"+
    "\1\246\7\10\1\0\2\10\6\0\10\10\1\247\11\10"+
    "\21\0\3\10\2\0\1\10\5\0\2\10\3\0\1\10"+
    "\1\250\7\10\1\0\2\10\6\0\22\10\21\0\3\10"+
    "\2\0\1\10\5\0\2\10\3\0\11\10\1\0\2\10"+
    "\6\0\1\251\21\10\21\0\3\10\2\0\1\10\5\0"+
    "\2\10\3\0\11\10\1\0\2\10\6\0\3\10\1\252"+
    "\16\10\21\0\3\10\2\0\1\10\5\0\2\10\3\0"+
    "\2\10\1\253\6\10\1\0\2\10\6\0\22\10\21\0"+
    "\3\10\2\0\1\10\5\0\2\10\3\0\11\10\1\0"+
    "\2\10\6\0\10\10\1\254\11\10\21\0\3\10\2\0"+
    "\1\10\5\0\2\10\3\0\11\10\1\0\2\10\6\0"+
    "\7\10\1\255\12\10\21\0\3\10\2\0\1\10\5\0"+
    "\1\256\1\10\3\0\11\10\1\0\2\10\6\0\22\10"+
    "\21\0\3\10\2\0\1\10\5\0\2\10\3\0\11\10"+
    "\1\0\2\10\6\0\11\10\1\257\10\10\21\0\3\10"+
    "\2\0\1\10\5\0\2\10\3\0\11\10\1\0\2\10"+
    "\6\0\4\10\1\260\15\10\23\0\1\106\15\0\1\107"+
    "\3\0\1\106\2\135\4\0\1\107\1\0\1\110\63\0"+
    "\1\261\3\0\1\261\2\0\4\261\4\0\1\261\10\0"+
    "\1\261\1\0\1\261\1\0\1\261\3\0\1\261\5\0"+
    "\1\261\20\0\5\140\1\262\4\140\1\263\72\140\37\0"+
    "\1\264\47\0\3\10\2\0\1\10\5\0\2\10\3\0"+
    "\11\10\1\0\2\10\6\0\1\10\1\265\14\10\1\266"+
    "\3\10\21\0\3\10\2\0\1\10\5\0\2\10\3\0"+
    "\1\10\1\267\7\10\1\0\2\10\6\0\22\10\21\0"+
    "\3\10\2\0\1\10\5\0\1\270\1\10\3\0\11\10"+
    "\1\0\2\10\6\0\22\10\21\0\3\10\2\0\1\10"+
    "\5\0\2\10\3\0\1\271\10\10\1\0\2\10\6\0"+
    "\22\10\21\0\3\10\2\0\1\10\5\0\2\10\3\0"+
    "\11\10\1\0\2\10\6\0\10\10\1\272\11\10\21\0"+
    "\3\10\2\0\1\10\5\0\2\10\3\0\2\10\1\273"+
    "\6\10\1\0\2\10\6\0\22\10\21\0\3\10\2\0"+
    "\1\10\5\0\1\10\1\274\3\0\11\10\1\0\2\10"+
    "\6\0\22\10\21\0\3\10\2\0\1\10\5\0\2\10"+
    "\3\0\11\10\1\0\2\10\6\0\1\275\21\10\21\0"+
    "\3\10\2\0\1\10\5\0\1\276\1\10\3\0\11\10"+
    "\1\0\2\10\6\0\22\10\21\0\3\10\2\0\1\10"+
    "\5\0\2\10\3\0\11\10\1\0\2\10\6\0\10\10"+
    "\1\277\11\10\21\0\3\10\2\0\1\10\5\0\2\10"+
    "\3\0\11\10\1\0\2\10\6\0\7\10\1\300\7\10"+
    "\1\301\2\10\21\0\3\10\2\0\1\10\5\0\1\302"+
    "\1\10\3\0\11\10\1\0\2\10\6\0\3\10\1\303"+
    "\16\10\21\0\3\10\2\0\1\10\5\0\2\10\3\0"+
    "\11\10\1\0\2\10\6\0\11\10\1\304\10\10\21\0"+
    "\3\10\2\0\1\10\5\0\1\305\1\10\3\0\11\10"+
    "\1\0\2\10\6\0\22\10\21\0\3\10\2\0\1\10"+
    "\5\0\2\10\3\0\11\10\1\0\2\10\6\0\12\10"+
    "\1\306\7\10\21\0\3\10\2\0\1\10\5\0\2\10"+
    "\3\0\11\10\1\0\2\10\6\0\2\10\1\307\17\10"+
    "\21\0\3\10\2\0\1\10\5\0\2\10\3\0\11\10"+
    "\1\0\2\10\6\0\4\10\1\310\15\10\21\0\3\10"+
    "\2\0\1\10\5\0\2\10\3\0\2\10\1\311\6\10"+
    "\1\0\2\10\6\0\10\10\1\312\11\10\21\0\3\10"+
    "\2\0\1\10\5\0\2\10\3\0\11\10\1\0\2\10"+
    "\6\0\1\313\21\10\21\0\3\10\2\0\1\10\5\0"+
    "\2\10\3\0\1\314\10\10\1\0\2\10\6\0\22\10"+
    "\21\0\3\10\2\0\1\10\5\0\2\10\3\0\11\10"+
    "\1\0\2\10\6\0\3\10\1\315\16\10\113\0\1\316"+
    "\12\0\3\211\10\0\2\211\3\0\11\211\1\0\2\211"+
    "\6\0\22\211\21\0\3\76\10\0\1\317\1\76\3\0"+
    "\11\76\1\0\2\76\6\0\22\76\17\0\4\216\1\320"+
    "\21\216\3\320\6\216\1\0\45\216\4\0\1\214\21\0"+
    "\3\214\56\0\3\111\2\0\1\111\5\0\1\321\1\111"+
    "\3\0\11\111\1\0\2\111\6\0\4\111\1\322\15\111"+
    "\21\0\3\111\2\0\1\111\5\0\2\111\3\0\1\323"+
    "\10\111\1\0\2\111\6\0\22\111\21\0\3\111\2\0"+
    "\1\111\5\0\2\111\3\0\1\324\10\111\1\0\2\111"+
    "\6\0\4\111\1\325\15\111\21\0\3\111\2\0\1\111"+
    "\5\0\2\111\3\0\2\111\1\326\6\111\1\0\2\111"+
    "\6\0\4\111\1\327\7\111\1\330\5\111\21\0\3\111"+
    "\2\0\1\111\5\0\1\331\1\111\3\0\11\111\1\0"+
    "\2\111\6\0\7\111\1\332\12\111\21\0\3\111\2\0"+
    "\1\111\5\0\2\111\3\0\1\333\10\111\1\0\2\111"+
    "\6\0\22\111\21\0\3\111\2\0\1\111\5\0\2\111"+
    "\3\0\11\111\1\0\2\111\6\0\7\111\1\334\12\111"+
    "\21\0\3\111\2\0\1\111\5\0\2\111\3\0\1\335"+
    "\10\111\1\0\2\111\6\0\22\111\21\0\3\111\2\0"+
    "\1\111\5\0\2\111\3\0\1\336\10\111\1\0\2\111"+
    "\6\0\22\111\21\0\3\111\2\0\1\111\5\0\2\111"+
    "\3\0\11\111\1\0\2\111\6\0\3\111\1\337\16\111"+
    "\21\0\3\111\2\0\1\111\5\0\2\111\3\0\11\111"+
    "\1\0\2\111\6\0\14\111\1\340\5\111\21\0\3\111"+
    "\2\0\1\111\5\0\2\111\3\0\1\341\10\111\1\0"+
    "\2\111\6\0\22\111\21\0\3\111\2\0\1\111\5\0"+
    "\2\111\3\0\11\111\1\0\2\111\6\0\16\111\1\342"+
    "\3\111\21\0\3\111\2\0\1\111\5\0\2\111\3\0"+
    "\11\111\1\0\2\111\6\0\4\111\1\343\15\111\17\0"+
    "\13\237\1\344\71\237\12\345\1\346\1\240\71\345\17\0"+
    "\1\347\111\0\1\350\132\0\1\351\101\0\1\352\37\0"+
    "\3\10\2\0\1\10\5\0\2\10\3\0\1\10\1\353"+
    "\7\10\1\0\2\10\6\0\14\10\1\354\5\10\21\0"+
    "\3\10\2\0\1\10\5\0\1\355\1\10\3\0\11\10"+
    "\1\0\2\10\6\0\22\10\21\0\3\10\2\0\1\10"+
    "\5\0\2\10\3\0\1\356\10\10\1\0\2\10\6\0"+
    "\22\10\21\0\3\10\2\0\1\10\5\0\2\10\3\0"+
    "\2\10\1\357\6\10\1\0\2\10\6\0\22\10\21\0"+
    "\3\10\2\0\1\10\5\0\2\10\3\0\11\10\1\0"+
    "\2\10\6\0\12\10\1\360\7\10\21\0\3\10\2\0"+
    "\1\10\5\0\2\10\3\0\1\361\10\10\1\0\2\10"+
    "\6\0\22\10\21\0\3\10\2\0\1\10\5\0\2\10"+
    "\3\0\1\362\10\10\1\0\2\10\6\0\22\10\21\0"+
    "\3\10\2\0\1\10\5\0\2\10\3\0\11\10\1\0"+
    "\1\363\1\10\6\0\22\10\21\0\3\10\2\0\1\10"+
    "\5\0\2\10\3\0\11\10\1\0\2\10\6\0\10\10"+
    "\1\364\11\10\21\0\3\10\2\0\1\10\5\0\2\10"+
    "\3\0\1\365\10\10\1\0\2\10\6\0\22\10\21\0"+
    "\3\10\2\0\1\10\5\0\2\10\3\0\11\10\1\0"+
    "\2\10\6\0\10\10\1\366\11\10\17\0\5\140\1\262"+
    "\4\140\1\367\72\140\15\0\1\263\6\0\1\263\7\0"+
    "\1\263\16\0\1\263\3\0\1\263\27\0\3\10\2\0"+
    "\1\10\5\0\2\10\3\0\1\370\10\10\1\0\2\10"+
    "\6\0\22\10\21\0\3\10\2\0\1\10\5\0\2\10"+
    "\3\0\1\10\1\371\7\10\1\0\2\10\6\0\22\10"+
    "\21\0\3\10\2\0\1\10\5\0\2\10\3\0\1\10"+
    "\1\372\7\10\1\0\2\10\6\0\22\10\21\0\3\10"+
    "\2\0\1\10\5\0\2\10\3\0\11\10\1\0\2\10"+
    "\6\0\4\10\1\373\15\10\21\0\3\10\2\0\1\10"+
    "\5\0\2\10\3\0\11\10\1\0\2\10\6\0\7\10"+
    "\1\374\12\10\21\0\3\10\2\0\1\10\5\0\2\10"+
    "\3\0\11\10\1\0\2\10\6\0\10\10\1\375\11\10"+
    "\21\0\3\10\2\0\1\10\5\0\2\10\3\0\11\10"+
    "\1\0\2\10\6\0\4\10\1\376\15\10\21\0\3\10"+
    "\2\0\1\10\5\0\2\10\3\0\11\10\1\0\2\10"+
    "\6\0\4\10\1\377\15\10\21\0\3\10\2\0\1\10"+
    "\5\0\2\10\3\0\11\10\1\0\2\10\6\0\1\u0100"+
    "\21\10\21\0\3\10\2\0\1\10\5\0\2\10\3\0"+
    "\11\10\1\0\2\10\6\0\17\10\1\u0101\2\10\21\0"+
    "\3\10\2\0\1\10\5\0\2\10\3\0\1\u0102\10\10"+
    "\1\0\2\10\6\0\22\10\21\0\3\10\2\0\1\10"+
    "\5\0\2\10\3\0\2\10\1\u0103\6\10\1\0\2\10"+
    "\6\0\22\10\21\0\3\10\2\0\1\10\5\0\2\10"+
    "\3\0\11\10\1\0\2\10\6\0\14\10\1\u0104\5\10"+
    "\21\0\3\10\2\0\1\10\5\0\2\10\3\0\1\u0105"+
    "\10\10\1\0\2\10\6\0\22\10\21\0\3\10\2\0"+
    "\1\10\5\0\2\10\3\0\11\10\1\0\2\10\6\0"+
    "\16\10\1\u0106\3\10\21\0\3\10\2\0\1\10\5\0"+
    "\2\10\3\0\11\10\1\0\2\10\6\0\5\10\1\u0107"+
    "\14\10\21\0\3\10\2\0\1\10\5\0\2\10\3\0"+
    "\1\10\1\u0108\7\10\1\0\2\10\6\0\22\10\21\0"+
    "\3\10\2\0\1\10\5\0\2\10\3\0\2\10\1\u0109"+
    "\6\10\1\0\2\10\6\0\22\10\21\0\3\10\2\0"+
    "\1\10\5\0\2\10\3\0\1\u010a\10\10\1\0\2\10"+
    "\6\0\10\10\1\u010b\11\10\21\0\3\10\2\0\1\10"+
    "\5\0\2\10\3\0\11\10\1\0\2\10\6\0\12\10"+
    "\1\u010c\7\10\21\0\3\10\2\0\1\10\5\0\2\10"+
    "\3\0\11\10\1\0\2\10\6\0\10\10\1\u010d\11\10"+
    "\21\0\3\10\2\0\1\10\5\0\2\10\3\0\11\10"+
    "\1\0\2\10\6\0\3\10\1\u010e\16\10\21\0\3\76"+
    "\10\0\2\76\3\0\2\76\1\u010f\6\76\1\0\2\76"+
    "\6\0\22\76\21\0\3\111\2\0\1\111\5\0\2\111"+
    "\3\0\11\111\1\0\2\111\6\0\1\u0110\21\111\21\0"+
    "\3\111\2\0\1\111\5\0\2\111\3\0\11\111\1\0"+
    "\2\111\6\0\5\111\1\u0111\14\111\21\0\3\111\2\0"+
    "\1\111\5\0\2\111\3\0\11\111\1\0\2\111\6\0"+
    "\10\111\1\u0112\11\111\21\0\3\111\2\0\1\111\5\0"+
    "\2\111\3\0\11\111\1\0\2\111\6\0\10\111\1\u0113"+
    "\11\111\21\0\3\111\2\0\1\111\5\0\2\111\3\0"+
    "\11\111\1\0\2\111\6\0\12\111\1\u0114\7\111\21\0"+
    "\3\111\2\0\1\111\5\0\2\111\3\0\11\111\1\0"+
    "\2\111\6\0\10\111\1\u0115\11\111\21\0\3\111\2\0"+
    "\1\111\5\0\2\111\3\0\11\111\1\0\2\111\6\0"+
    "\6\111\1\u0116\13\111\21\0\3\111\2\0\1\111\5\0"+
    "\2\111\3\0\11\111\1\0\2\111\6\0\1\u0117\7\111"+
    "\1\u0118\11\111\21\0\3\111\2\0\1\111\5\0\1\u0119"+
    "\1\111\3\0\11\111\1\0\2\111\6\0\22\111\21\0"+
    "\3\111\2\0\1\111\5\0\2\111\3\0\11\111\1\0"+
    "\2\111\6\0\21\111\1\u011a\21\0\3\111\2\0\1\111"+
    "\5\0\2\111\3\0\11\111\1\0\2\111\6\0\10\111"+
    "\1\u011b\11\111\21\0\3\111\2\0\1\111\5\0\2\111"+
    "\3\0\1\u011c\10\111\1\0\2\111\6\0\22\111\21\0"+
    "\3\111\2\0\1\111\5\0\2\111\3\0\11\111\1\0"+
    "\2\111\6\0\2\111\1\u011d\17\111\21\0\3\111\2\0"+
    "\1\111\5\0\2\111\3\0\11\111\1\0\2\111\6\0"+
    "\14\111\1\u011e\5\111\21\0\3\111\2\0\1\111\5\0"+
    "\2\111\3\0\11\111\1\0\2\111\6\0\3\111\1\u011f"+
    "\16\111\21\0\3\111\2\0\1\111\5\0\2\111\3\0"+
    "\11\111\1\0\2\111\6\0\10\111\1\u0120\11\111\21\0"+
    "\3\111\2\0\1\111\5\0\2\111\3\0\1\u0121\10\111"+
    "\1\0\2\111\6\0\22\111\21\0\3\111\2\0\1\111"+
    "\5\0\2\111\3\0\11\111\1\0\2\111\6\0\12\111"+
    "\1\u0122\7\111\17\0\12\237\1\u0123\1\344\71\237\13\345"+
    "\1\u0124\71\345\6\u0125\1\0\10\u0125\1\347\1\u0126\63\u0125"+
    "\23\0\1\u0127\142\0\1\u0128\26\0\3\10\2\0\1\10"+
    "\5\0\2\10\3\0\1\u0129\10\10\1\0\2\10\6\0"+
    "\22\10\21\0\3\10\2\0\1\10\5\0\2\10\3\0"+
    "\11\10\1\0\2\10\6\0\3\10\1\u012a\16\10\21\0"+
    "\3\10\2\0\1\10\5\0\2\10\3\0\11\10\1\0"+
    "\2\10\6\0\1\u012b\21\10\21\0\3\10\2\0\1\10"+
    "\5\0\2\10\3\0\11\10\1\0\2\10\6\0\3\10"+
    "\1\u012c\16\10\21\0\3\10\2\0\1\10\5\0\2\10"+
    "\3\0\1\u012d\10\10\1\0\2\10\6\0\22\10\21\0"+
    "\3\10\2\0\1\10\5\0\2\10\3\0\11\10\1\0"+
    "\2\10\6\0\10\10\1\u012e\11\10\21\0\3\10\2\0"+
    "\1\10\5\0\2\10\3\0\11\10\1\0\2\10\6\0"+
    "\1\u012f\2\10\1\u0130\16\10\21\0\3\10\2\0\1\10"+
    "\5\0\2\10\3\0\11\10\1\0\2\10\6\0\12\10"+
    "\1\u0131\7\10\21\0\3\10\2\0\1\10\5\0\2\10"+
    "\3\0\11\10\1\0\2\10\6\0\3\10\1\u0132\16\10"+
    "\21\0\3\10\2\0\1\10\5\0\1\u0133\1\10\3\0"+
    "\11\10\1\0\2\10\6\0\22\10\17\0\5\140\1\262"+
    "\4\140\1\263\2\140\1\367\6\140\1\367\7\140\1\367"+
    "\16\140\1\367\3\140\1\367\25\140\2\0\3\10\2\0"+
    "\1\10\5\0\2\10\3\0\11\10\1\0\2\10\6\0"+
    "\3\10\1\u0134\16\10\21\0\3\10\2\0\1\10\5\0"+
    "\2\10\3\0\1\u0135\10\10\1\0\2\10\6\0\22\10"+
    "\21\0\3\10\2\0\1\10\5\0\2\10\3\0\11\10"+
    "\1\0\2\10\6\0\5\10\1\u0136\14\10\21\0\3\10"+
    "\2\0\1\10\5\0\2\10\3\0\11\10\1\0\2\10"+
    "\6\0\3\10\1\u0137\16\10\21\0\3\10\2\0\1\10"+
    "\5\0\2\10\3\0\11\10\1\0\2\10\6\0\3\10"+
    "\1\u0138\16\10\21\0\3\10\2\0\1\10\5\0\2\10"+
    "\3\0\11\10\1\0\2\10\6\0\7\10\1\u0139\12\10"+
    "\21\0\3\10\2\0\1\10\5\0\2\10\3\0\11\10"+
    "\1\0\1\u013a\1\10\6\0\22\10\21\0\3\10\2\0"+
    "\1\10\5\0\2\10\3\0\11\10\1\0\2\10\6\0"+
    "\13\10\1\u013b\6\10\21\0\3\10\2\0\1\10\5\0"+
    "\2\10\3\0\11\10\1\0\2\10\6\0\11\10\1\u013c"+
    "\10\10\21\0\3\10\2\0\1\10\5\0\2\10\3\0"+
    "\11\10\1\0\2\10\6\0\1\10\1\u013d\20\10\21\0"+
    "\3\10\2\0\1\10\5\0\2\10\3\0\11\10\1\0"+
    "\2\10\6\0\6\10\1\u013e\13\10\21\0\3\10\2\0"+
    "\1\10\5\0\2\10\3\0\11\10\1\0\2\10\6\0"+
    "\4\10\1\u013f\15\10\21\0\3\10\2\0\1\10\5\0"+
    "\2\10\3\0\11\10\1\0\2\10\6\0\4\10\1\u0140"+
    "\15\10\21\0\3\10\2\0\1\10\5\0\1\u0141\1\10"+
    "\3\0\11\10\1\0\2\10\6\0\22\10\21\0\3\10"+
    "\2\0\1\10\5\0\2\10\3\0\2\10\1\u0142\6\10"+
    "\1\0\2\10\6\0\22\10\21\0\3\10\2\0\1\10"+
    "\5\0\2\10\3\0\11\10\1\0\2\10\6\0\15\10"+
    "\1\u0143\4\10\21\0\3\10\2\0\1\10\5\0\1\u0144"+
    "\1\10\3\0\11\10\1\0\2\10\6\0\22\10\21\0"+
    "\3\10\2\0\1\10\5\0\2\10\3\0\11\10\1\0"+
    "\2\10\6\0\3\10\1\u0145\16\10\21\0\3\111\2\0"+
    "\1\111\5\0\2\111\3\0\11\111\1\0\2\111\6\0"+
    "\4\111\1\u0146\15\111\21\0\3\111\2\0\1\111\5\0"+
    "\2\111\3\0\1\u0147\10\111\1\0\2\111\6\0\22\111"+
    "\21\0\3\111\2\0\1\111\5\0\2\111\3\0\11\111"+
    "\1\0\2\111\6\0\10\111\1\u0148\11\111\21\0\3\111"+
    "\2\0\1\111\5\0\2\111\3\0\11\111\1\0\2\111"+
    "\6\0\4\111\1\u0149\15\111\21\0\3\111\2\0\1\111"+
    "\5\0\2\111\3\0\11\111\1\0\2\111\6\0\3\111"+
    "\1\u014a\16\111\21\0\3\111\2\0\1\111\5\0\1\u014b"+
    "\1\111\3\0\11\111\1\0\2\111\6\0\22\111\21\0"+
    "\3\111\2\0\1\111\5\0\2\111\3\0\1\u014c\10\111"+
    "\1\0\2\111\6\0\22\111\21\0\3\111\2\0\1\111"+
    "\5\0\2\111\3\0\11\111\1\0\2\111\6\0\6\111"+
    "\1\u014d\13\111\21\0\3\111\2\0\1\111\5\0\2\111"+
    "\3\0\11\111\1\0\1\u014e\1\111\6\0\22\111\21\0"+
    "\3\111\2\0\1\111\5\0\2\111\3\0\1\111\1\u014f"+
    "\7\111\1\0\2\111\6\0\22\111\21\0\3\111\2\0"+
    "\1\111\5\0\2\111\3\0\11\111\1\0\2\111\6\0"+
    "\7\111\1\u0150\12\111\21\0\3\111\2\0\1\111\5\0"+
    "\2\111\3\0\11\111\1\0\2\111\6\0\14\111\1\u0151"+
    "\5\111\21\0\3\111\2\0\1\111\5\0\2\111\3\0"+
    "\11\111\1\0\2\111\6\0\11\111\1\u0152\10\111\21\0"+
    "\3\111\2\0\1\111\5\0\2\111\3\0\11\111\1\0"+
    "\2\111\6\0\7\111\1\u0153\12\111\21\0\3\111\2\0"+
    "\1\111\5\0\2\111\3\0\11\111\1\0\2\111\6\0"+
    "\10\111\1\u0154\11\111\21\0\3\111\2\0\1\111\5\0"+
    "\2\111\3\0\1\u0155\10\111\1\0\2\111\6\0\22\111"+
    "\21\0\3\111\2\0\1\111\5\0\2\111\3\0\11\111"+
    "\1\0\2\111\6\0\10\111\1\u0156\11\111\21\0\3\111"+
    "\2\0\1\111\5\0\2\111\3\0\11\111\1\0\2\111"+
    "\6\0\3\111\1\u0157\16\111\21\0\3\111\2\0\1\111"+
    "\5\0\2\111\3\0\11\111\1\0\2\111\6\0\5\111"+
    "\1\u0158\14\111\17\0\12\345\1\346\1\u0124\71\345\6\u0125"+
    "\1\0\10\u0125\1\0\64\u0125\1\0\6\u0126\1\0\10\u0126"+
    "\1\u0159\64\u0126\16\0\1\u015a\136\0\1\u015b\37\0\3\10"+
    "\2\0\1\10\5\0\2\10\3\0\11\10\1\0\1\u015c"+
    "\1\10\6\0\22\10\21\0\3\10\2\0\1\10\5\0"+
    "\2\10\3\0\11\10\1\0\2\10\6\0\10\10\1\u015d"+
    "\11\10\21\0\3\10\2\0\1\10\5\0\2\10\3\0"+
    "\1\u015e\10\10\1\0\2\10\6\0\22\10\21\0\3\10"+
    "\2\0\1\10\5\0\1\10\1\u015f\3\0\11\10\1\0"+
    "\2\10\6\0\22\10\21\0\3\10\2\0\1\10\5\0"+
    "\1\u0160\1\10\3\0\11\10\1\0\2\10\6\0\22\10"+
    "\21\0\3\10\2\0\1\10\5\0\2\10\3\0\11\10"+
    "\1\0\2\10\6\0\6\10\1\u0161\13\10\21\0\3\10"+
    "\2\0\1\10\5\0\2\10\3\0\11\10\1\0\2\10"+
    "\6\0\1\u0162\21\10\21\0\3\10\2\0\1\10\5\0"+
    "\2\10\3\0\11\10\1\0\2\10\6\0\15\10\1\u0163"+
    "\4\10\21\0\3\10\2\0\1\10\5\0\2\10\3\0"+
    "\11\10\1\0\2\10\6\0\12\10\1\u0164\7\10\21\0"+
    "\3\10\2\0\1\10\5\0\2\10\3\0\11\10\1\0"+
    "\2\10\6\0\1\u0165\21\10\21\0\3\10\2\0\1\10"+
    "\5\0\2\10\3\0\11\10\1\0\2\10\6\0\4\10"+
    "\1\u0166\15\10\21\0\3\10\2\0\1\10\5\0\2\10"+
    "\3\0\1\10\1\u0167\7\10\1\0\2\10\6\0\22\10"+
    "\21\0\3\10\2\0\1\10\5\0\1\u0168\1\10\3\0"+
    "\11\10\1\0\2\10\6\0\22\10\21\0\3\10\2\0"+
    "\1\10\5\0\2\10\3\0\1\u0169\10\10\1\0\2\10"+
    "\6\0\22\10\21\0\3\10\2\0\1\10\5\0\2\10"+
    "\3\0\1\u016a\10\10\1\0\2\10\6\0\22\10\21\0"+
    "\3\10\2\0\1\10\5\0\2\10\3\0\11\10\1\0"+
    "\2\10\6\0\10\10\1\u016b\11\10\21\0\3\10\2\0"+
    "\1\10\5\0\2\10\3\0\11\10\1\0\2\10\6\0"+
    "\13\10\1\u016c\6\10\21\0\3\10\2\0\1\10\5\0"+
    "\2\10\3\0\11\10\1\0\2\10\6\0\12\10\1\u016d"+
    "\7\10\21\0\3\10\2\0\1\10\5\0\2\10\3\0"+
    "\11\10\1\0\2\10\6\0\1\u016e\21\10\21\0\3\10"+
    "\2\0\1\10\5\0\1\u016f\1\10\3\0\11\10\1\0"+
    "\2\10\6\0\22\10\21\0\3\111\2\0\1\111\5\0"+
    "\2\111\3\0\1\111\1\u0170\7\111\1\0\2\111\6\0"+
    "\22\111\21\0\3\111\2\0\1\111\5\0\2\111\3\0"+
    "\11\111\1\0\1\111\1\u0171\6\0\22\111\21\0\3\111"+
    "\2\0\1\111\5\0\2\111\3\0\1\u0172\10\111\1\0"+
    "\2\111\6\0\22\111\21\0\3\111\2\0\1\111\5\0"+
    "\2\111\3\0\11\111\1\0\2\111\6\0\14\111\1\u0173"+
    "\5\111\21\0\3\111\2\0\1\111\5\0\2\111\3\0"+
    "\11\111\1\0\2\111\6\0\16\111\1\u0174\3\111\21\0"+
    "\3\111\2\0\1\111\5\0\2\111\3\0\11\111\1\0"+
    "\2\111\6\0\2\111\1\u0175\17\111\21\0\3\111\2\0"+
    "\1\111\5\0\2\111\3\0\11\111\1\0\2\111\6\0"+
    "\4\111\1\u0176\15\111\21\0\3\111\2\0\1\111\5\0"+
    "\2\111\3\0\11\111\1\0\2\111\6\0\6\111\1\u0177"+
    "\13\111\21\0\3\111\2\0\1\111\5\0\1\u0178\1\111"+
    "\3\0\11\111\1\0\2\111\6\0\22\111\21\0\3\111"+
    "\2\0\1\111\5\0\2\111\3\0\11\111\1\0\2\111"+
    "\6\0\20\111\1\u0179\1\111\21\0\3\111\2\0\1\111"+
    "\5\0\2\111\3\0\11\111\1\0\2\111\6\0\13\111"+
    "\1\u017a\6\111\21\0\3\111\2\0\1\111\5\0\2\111"+
    "\3\0\1\u017b\10\111\1\0\2\111\6\0\22\111\21\0"+
    "\1\111\1\u017c\1\111\2\0\1\111\5\0\2\111\3\0"+
    "\11\111\1\0\2\111\6\0\22\111\21\0\3\111\2\0"+
    "\1\111\5\0\2\111\3\0\1\u017d\10\111\1\0\2\111"+
    "\6\0\22\111\21\0\3\111\2\0\1\111\5\0\2\111"+
    "\3\0\1\111\1\u017e\7\111\1\0\2\111\6\0\22\111"+
    "\17\0\6\u0159\1\0\12\u0159\1\u017f\62\u0159\17\0\1\u0180"+
    "\70\0\3\10\2\0\1\10\5\0\2\10\3\0\1\u0181"+
    "\10\10\1\0\2\10\6\0\22\10\21\0\3\10\2\0"+
    "\1\10\5\0\2\10\3\0\11\10\1\0\2\10\6\0"+
    "\4\10\1\u0182\15\10\21\0\3\10\2\0\1\10\5\0"+
    "\2\10\3\0\11\10\1\0\2\10\6\0\14\10\1\u0183"+
    "\5\10\21\0\3\10\2\0\1\10\5\0\2\10\3\0"+
    "\2\10\1\u0184\6\10\1\0\2\10\6\0\22\10\21\0"+
    "\3\10\2\0\1\10\5\0\2\10\3\0\11\10\1\0"+
    "\2\10\6\0\12\10\1\u0185\7\10\21\0\3\10\2\0"+
    "\1\10\5\0\2\10\3\0\11\10\1\0\2\10\6\0"+
    "\10\10\1\u0186\11\10\21\0\3\10\2\0\1\10\5\0"+
    "\2\10\3\0\11\10\1\0\2\10\6\0\12\10\1\u0187"+
    "\7\10\21\0\3\10\2\0\1\10\5\0\2\10\3\0"+
    "\11\10\1\0\2\10\6\0\6\10\1\u0188\13\10\21\0"+
    "\3\10\2\0\1\10\5\0\1\10\1\u0189\3\0\11\10"+
    "\1\0\2\10\6\0\22\10\21\0\3\10\2\0\1\10"+
    "\5\0\2\10\3\0\1\u018a\10\10\1\0\2\10\6\0"+
    "\22\10\21\0\3\10\2\0\1\10\5\0\2\10\3\0"+
    "\1\u018b\10\10\1\0\2\10\6\0\22\10\21\0\3\10"+
    "\2\0\1\10\5\0\2\10\3\0\11\10\1\0\2\10"+
    "\6\0\7\10\1\u018c\12\10\21\0\3\10\2\0\1\10"+
    "\5\0\2\10\3\0\11\10\1\0\2\10\6\0\6\10"+
    "\1\u018d\13\10\21\0\3\111\2\0\1\111\5\0\2\111"+
    "\3\0\11\111\1\0\2\111\6\0\1\u018e\21\111\21\0"+
    "\3\111\2\0\1\111\5\0\2\111\3\0\11\111\1\0"+
    "\2\111\6\0\3\111\1\u018f\16\111\21\0\3\111\2\0"+
    "\1\111\5\0\2\111\3\0\1\u0190\10\111\1\0\2\111"+
    "\6\0\22\111\21\0\3\111\2\0\1\111\5\0\2\111"+
    "\3\0\11\111\1\0\2\111\6\0\7\111\1\u0191\12\111"+
    "\21\0\3\111\2\0\1\111\5\0\2\111\3\0\11\111"+
    "\1\0\2\111\6\0\11\111\1\u0192\10\111\21\0\3\111"+
    "\2\0\1\111\5\0\2\111\3\0\11\111\1\0\2\111"+
    "\6\0\3\111\1\u0193\16\111\21\0\3\111\2\0\1\111"+
    "\5\0\2\111\3\0\11\111\1\0\2\111\6\0\7\111"+
    "\1\u0194\12\111\21\0\3\111\2\0\1\111\5\0\2\111"+
    "\3\0\11\111\1\0\2\111\6\0\12\111\1\u0195\7\111"+
    "\21\0\3\111\2\0\1\111\5\0\2\111\3\0\11\111"+
    "\1\0\2\111\6\0\4\111\1\u0196\15\111\21\0\3\111"+
    "\2\0\1\111\5\0\2\111\3\0\11\111\1\0\2\111"+
    "\6\0\3\111\1\u0197\16\111\21\0\3\111\2\0\1\111"+
    "\5\0\2\111\3\0\11\111\1\0\2\111\6\0\14\111"+
    "\1\u0198\5\111\36\0\1\u0199\67\0\3\10\2\0\1\10"+
    "\5\0\2\10\3\0\11\10\1\0\2\10\6\0\1\u019a"+
    "\21\10\21\0\3\10\2\0\1\10\5\0\2\10\3\0"+
    "\11\10\1\0\2\10\6\0\12\10\1\u019b\7\10\21\0"+
    "\3\10\2\0\1\10\5\0\2\10\3\0\11\10\1\0"+
    "\2\10\6\0\1\u019c\21\10\21\0\3\10\2\0\1\10"+
    "\5\0\2\10\3\0\11\10\1\0\2\10\6\0\10\10"+
    "\1\u019d\11\10\21\0\3\10\2\0\1\10\5\0\2\10"+
    "\3\0\1\u019e\10\10\1\0\2\10\6\0\22\10\21\0"+
    "\3\10\2\0\1\10\5\0\2\10\3\0\1\u019f\10\10"+
    "\1\0\2\10\6\0\22\10\21\0\3\111\2\0\1\111"+
    "\5\0\2\111\3\0\11\111\1\0\2\111\6\0\7\111"+
    "\1\u01a0\12\111\21\0\3\111\2\0\1\111\5\0\2\111"+
    "\3\0\11\111\1\0\2\111\6\0\13\111\1\u01a1\6\111"+
    "\21\0\3\111\2\0\1\111\5\0\2\111\3\0\1\u01a2"+
    "\10\111\1\0\2\111\6\0\22\111\21\0\3\111\2\0"+
    "\1\111\5\0\1\u01a3\1\111\3\0\11\111\1\0\2\111"+
    "\6\0\22\111\21\0\3\111\2\0\1\111\5\0\2\111"+
    "\3\0\11\111\1\0\2\111\6\0\10\111\1\u01a4\11\111"+
    "\21\0\3\111\2\0\1\111\5\0\2\111\3\0\11\111"+
    "\1\0\2\111\6\0\11\111\1\u01a5\10\111\21\0\3\111"+
    "\2\0\1\111\5\0\2\111\3\0\11\111\1\0\2\111"+
    "\6\0\4\111\1\u01a6\15\111\17\0\6\u0125\1\0\10\u0125"+
    "\1\u0199\64\u0125\3\0\3\10\2\0\1\10\5\0\2\10"+
    "\3\0\11\10\1\0\2\10\6\0\10\10\1\u01a7\11\10"+
    "\21\0\3\10\2\0\1\10\5\0\2\10\3\0\1\u01a8"+
    "\10\10\1\0\2\10\6\0\22\10\21\0\3\111\2\0"+
    "\1\111\5\0\2\111\3\0\11\111\1\0\1\u01a9\1\111"+
    "\6\0\22\111\21\0\3\111\2\0\1\111\5\0\2\111"+
    "\3\0\1\111\1\u01aa\7\111\1\0\2\111\6\0\22\111"+
    "\21\0\3\111\2\0\1\111\5\0\2\111\3\0\1\u01ab"+
    "\10\111\1\0\2\111\6\0\22\111\21\0\3\111\2\0"+
    "\1\111\5\0\1\u01ac\1\111\3\0\11\111\1\0\2\111"+
    "\6\0\22\111\21\0\3\111\2\0\1\111\5\0\2\111"+
    "\3\0\11\111\1\0\2\111\6\0\6\111\1\u01ad\13\111"+
    "\21\0\3\10\2\0\1\10\5\0\2\10\3\0\2\10"+
    "\1\u01ae\6\10\1\0\2\10\6\0\22\10\21\0\3\111"+
    "\2\0\1\111\5\0\2\111\3\0\11\111\1\0\2\111"+
    "\6\0\6\111\1\u01af\13\111\21\0\3\111\2\0\1\111"+
    "\5\0\2\111\3\0\11\111\1\0\2\111\6\0\6\111"+
    "\1\u01b0\13\111\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21735];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\4\1\1\11\5\1\2\11\7\1\4\11"+
    "\14\1\4\11\1\1\1\11\2\1\1\11\10\1\1\11"+
    "\1\1\1\11\6\1\2\11\3\0\1\1\1\0\2\1"+
    "\2\11\2\0\15\1\1\0\1\11\1\0\2\11\1\0"+
    "\26\1\13\11\1\1\3\11\1\1\1\11\1\1\2\0"+
    "\1\11\22\1\4\0\15\1\1\0\1\1\1\11\31\1"+
    "\1\11\25\1\1\0\1\1\1\11\2\0\1\11\1\0"+
    "\70\1\1\11\1\0\3\1\1\0\60\1\2\0\1\11"+
    "\44\1\1\0\30\1\1\0\27\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[432];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private static final class State {
        final int lBraceCount;
        final int state;

        public State(int state, int lBraceCount) {
            this.state = state;
            this.lBraceCount = lBraceCount;
        }

        @Override
        public String toString() {
            return "yystate = " + state + (lBraceCount == 0 ? "" : "lBraceCount = " + lBraceCount);
        }
    }

    private final Stack<State> states = new Stack<State>();
    private int lBraceCount;

    private int commentStart;
    private int commentDepth;

    private void pushState(int state) {
        states.push(new State(yystate(), lBraceCount));
        lBraceCount = 0;
        yybegin(state);
    }

    private String getStateName(int state) {
        if(state == SHORT_TEMPLATE_ENTRY) {
          return "SHORT_TEMPLATE_ENTRY";
        }
        if(state == LONG_TEMPLATE_ENTRY) {
          return "LONG_TEMPLATE_ENTRY";
        }
        if(state == QUO_STRING) {
          return "QUO_STRING";
        }
        if(state == APOS_STRING) {
          return "APOS_STRING";
        }
        return null;
    }

    private void popState() {
        State state = states.pop();
        lBraceCount = state.lBraceCount;
        yybegin(state.state);
    }

    public _HaxeLexer() {
      this((java.io.Reader)null);
    }


  public _HaxeLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _HaxeLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1706) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 118: 
          { return KSETTER;
          }
        case 135: break;
        case 41: 
          { return KIF ;
          }
        case 136: break;
        case 20: 
          { return OMINUS;
          }
        case 137: break;
        case 44: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return OCOMPLEMENT;
          }
        case 138: break;
        case 103: 
          { return KSWITCH ;
          }
        case 139: break;
        case 38: 
          { return MML_COMMENT;
          }
        case 140: break;
        case 26: 
          { return OBIT_AND;
          }
        case 141: break;
        case 24: 
          { return OQUEST;
          }
        case 142: break;
        case 5: 
          { return OQUOTIENT;
          }
        case 143: break;
        case 125: 
          { return KOVERRIDE;
          }
        case 144: break;
        case 82: 
          { return( KCAST );
          }
        case 145: break;
        case 134: 
          { return KPROTECTED;
          }
        case 146: break;
        case 55: 
          { return OCOND_OR;
          }
        case 147: break;
        case 92: 
          { return KTHROW ;
          }
        case 148: break;
        case 79: 
          { return KTRUE ;
          }
        case 149: break;
        case 3: 
          { return ID;
          }
        case 150: break;
        case 121: 
          { return KGETTER;
          }
        case 151: break;
        case 54: 
          { return OBIT_OR_ASSIGN;
          }
        case 152: break;
        case 39: 
          { return OQUOTIENT_ASSIGN;
          }
        case 153: break;
        case 59: 
          { return OSHIFT_LEFT;
          }
        case 154: break;
        case 100: 
          { return KIMPORT ;
          }
        case 155: break;
        case 78: 
          { return KNULL ;
          }
        case 156: break;
        case 111: 
          { return( KEXTENDS );
          }
        case 157: break;
        case 77: 
          { return( KENUM );
          }
        case 158: break;
        case 17: 
          { return PRBRACK;
          }
        case 159: break;
        case 49: 
          { return OARROW;
          }
        case 160: break;
        case 1: 
          { yybegin(YYINITIAL); return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 161: break;
        case 16: 
          { return PLBRACK;
          }
        case 162: break;
        case 94: 
          { return KCATCH;
          }
        case 163: break;
        case 63: 
          { pushState(LONG_TEMPLATE_ENTRY); return LONG_TEMPLATE_ENTRY_START;
          }
        case 164: break;
        case 101: 
          { return KINLINE;
          }
        case 165: break;
        case 130: 
          { return KCOREAPI;
          }
        case 166: break;
        case 117: 
          { return( KPACKAGE );
          }
        case 167: break;
        case 104: 
          { return KSTATIC;
          }
        case 168: break;
        case 80: 
          { return KTHIS ;
          }
        case 169: break;
        case 132: 
          { return( KIMPLEMENTS );
          }
        case 170: break;
        case 98: 
          { return KHACK;
          }
        case 171: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 172: break;
        case 36: 
          { return MACRO_ID;
          }
        case 173: break;
        case 128: 
          { return( KINTERFACE );
          }
        case 174: break;
        case 46: 
          { return OPLUS_ASSIGN;
          }
        case 175: break;
        case 68: 
          { return REG_EXP;
          }
        case 176: break;
        case 28: 
          { return OBIT_XOR;
          }
        case 177: break;
        case 45: 
          { return OPLUS_PLUS;
          }
        case 178: break;
        case 126: 
          { return KNODEBUG;
          }
        case 179: break;
        case 102: 
          { return KEXTERN;
          }
        case 180: break;
        case 61: 
          { return OREMAINDER_ASSIGN;
          }
        case 181: break;
        case 86: 
          { return KFALSE ;
          }
        case 182: break;
        case 109: 
          { return KBUILD;
          }
        case 183: break;
        case 43: 
          { return LITOCT;
          }
        case 184: break;
        case 4: 
          { return OCOLON;
          }
        case 185: break;
        case 73: 
          { return OSHIFT_LEFT_ASSIGN;
          }
        case 186: break;
        case 85: 
          { return PPELSE;
          }
        case 187: break;
        case 58: 
          { return OLESS_OR_EQUAL;
          }
        case 188: break;
        case 72: 
          { return KVAR;
          }
        case 189: break;
        case 37: 
          { return MSL_COMMENT;
          }
        case 190: break;
        case 96: 
          { return KBIND;
          }
        case 191: break;
        case 84: 
          { return CONDITIONAL_STATEMENT_ID;
          }
        case 192: break;
        case 11: 
          { return ODOT;
          }
        case 193: break;
        case 50: 
          { return OMINUS_ASSIGN;
          }
        case 194: break;
        case 123: 
          { return( KABSTRACT );
          }
        case 195: break;
        case 107: 
          { return KFINAL;
          }
        case 196: break;
        case 75: 
          { return PPEND;
          }
        case 197: break;
        case 27: 
          { return OLESS;
          }
        case 198: break;
        case 67: 
          { return LITHEX;
          }
        case 199: break;
        case 64: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { return LITFLOAT;
          }
        case 200: break;
        case 105: 
          { return KRETURN ;
          }
        case 201: break;
        case 8: 
          { return PRPAREN;
          }
        case 202: break;
        case 35: 
          { if (lBraceCount == 0) {
                                                popState();
                                                return LONG_TEMPLATE_ENTRY_END;
                                              }
                                              lBraceCount--;
                                              return PRCURLY;
          }
        case 203: break;
        case 70: 
          { return ONEW;
          }
        case 204: break;
        case 48: 
          { return OMINUS_MINUS;
          }
        case 205: break;
        case 7: 
          { return PLPAREN;
          }
        case 206: break;
        case 133: 
          { return KAUTOBUILD;
          }
        case 207: break;
        case 106: 
          { return KPUBLIC;
          }
        case 208: break;
        case 33: 
          { popState(); return ID;
          }
        case 209: break;
        case 95: 
          { return KMETA;
          }
        case 210: break;
        case 66: 
          { return KFOR ;
          }
        case 211: break;
        case 25: 
          { return OBIT_OR;
          }
        case 212: break;
        case 119: 
          { return KNATIVE;
          }
        case 213: break;
        case 113: 
          { return KDYNAMIC;
          }
        case 214: break;
        case 112: 
          { return( KDEFAULT );
          }
        case 215: break;
        case 21: 
          { return OGREATER;
          }
        case 216: break;
        case 88: 
          { return KNEVER;
          }
        case 217: break;
        case 19: 
          { return OCOMMA;
          }
        case 218: break;
        case 122: 
          { return( KFUNCTION );
          }
        case 219: break;
        case 87: 
          { return KSUPER ;
          }
        case 220: break;
        case 32: 
          { popState(); return CLOSING_QUOTE;
          }
        case 221: break;
        case 52: 
          { return OEQ;
          }
        case 222: break;
        case 47: 
          { return KDO ;
          }
        case 223: break;
        case 131: 
          { return KOVERLOAD;
          }
        case 224: break;
        case 127: 
          { return KREQUIRE;
          }
        case 225: break;
        case 116: 
          { return KPRIVATE;
          }
        case 226: break;
        case 23: 
          { return ONOT;
          }
        case 227: break;
        case 15: 
          { return PRCURLY;
          }
        case 228: break;
        case 71: 
          { return KTRY;
          }
        case 229: break;
        case 30: 
          { return REGULAR_STRING_PART;
          }
        case 230: break;
        case 83: 
          { popState(); return KTHIS;
          }
        case 231: break;
        case 81: 
          { return( KCASE );
          }
        case 232: break;
        case 14: 
          { return PLCURLY;
          }
        case 233: break;
        case 93: 
          { return( KCLASS );
          }
        case 234: break;
        case 108: 
          { return KMACRO;
          }
        case 235: break;
        case 110: 
          { return KDEBUG;
          }
        case 236: break;
        case 22: 
          { return OASSIGN;
          }
        case 237: break;
        case 6: 
          { return OMUL;
          }
        case 238: break;
        case 57: 
          { return OCOND_AND;
          }
        case 239: break;
        case 91: 
          { return KUSING ;
          }
        case 240: break;
        case 53: 
          { return ONOT_EQ;
          }
        case 241: break;
        case 12: 
          { pushState(QUO_STRING); return OPEN_QUOTE;
          }
        case 242: break;
        case 129: 
          { return KFAKEENUM;
          }
        case 243: break;
        case 89: 
          { return KWHILE ;
          }
        case 244: break;
        case 56: 
          { return OBIT_AND_ASSIGN;
          }
        case 245: break;
        case 10: 
          { return OPLUS;
          }
        case 246: break;
        case 34: 
          { lBraceCount++; return PLCURLY;
          }
        case 247: break;
        case 76: 
          { return KELSE ;
          }
        case 248: break;
        case 31: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 249: break;
        case 9: 
          { return LITINT;
          }
        case 250: break;
        case 65: 
          { return DOC_COMMENT;
          }
        case 251: break;
        case 124: 
          { return KCONTINUE ;
          }
        case 252: break;
        case 74: 
          { return KNS;
          }
        case 253: break;
        case 120: 
          { return KBITMAP;
          }
        case 254: break;
        case 114: 
          { return KUNTYPED;
          }
        case 255: break;
        case 51: 
          { return OFAT_ARROW;
          }
        case 256: break;
        case 97: 
          { return KKEEP;
          }
        case 257: break;
        case 90: 
          { return( KBREAK );
          }
        case 258: break;
        case 18: 
          { return OSEMI;
          }
        case 259: break;
        case 29: 
          { return OREMAINDER;
          }
        case 260: break;
        case 40: 
          { return OMUL_ASSIGN;
          }
        case 261: break;
        case 42: 
          { return OIN;
          }
        case 262: break;
        case 13: 
          { pushState(APOS_STRING); return OPEN_QUOTE;
          }
        case 263: break;
        case 115: 
          { return KTYPEDEF;
          }
        case 264: break;
        case 99: 
          { return PPERROR;
          }
        case 265: break;
        case 60: 
          { return OBIT_XOR_ASSIGN;
          }
        case 266: break;
        case 62: 
          { pushState(SHORT_TEMPLATE_ENTRY);
                                                                  yypushback(yylength() - 1);
                                                                  return SHORT_TEMPLATE_ENTRY_START;
          }
        case 267: break;
        case 69: 
          { return OTRIPLE_DOT;
          }
        case 268: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
