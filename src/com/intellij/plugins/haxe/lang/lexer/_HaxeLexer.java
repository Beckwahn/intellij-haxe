/*
 * Copyright 2000-2013 JetBrains s.r.o.
 * Copyright 2014-2014 AS3Boyan
 * Copyright 2014-2014 Elias Ku
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* The following code was generated by JFlex 1.4.3 on 18.10.14 22:21 */

package com.intellij.plugins.haxe.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 18.10.14 22:21 from the specification file
 * <tt>/home/as3boyan/IdeaProjects/intellij-haxe-jet-brains/src/com/intellij/plugins/haxe/lang/lexer/haxe.flex</tt>
 */
public class _HaxeLexer implements FlexLexer, HaxeTokenTypes, HaxeTokenTypeSets {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int APOS_STRING = 4;
  public static final int YYINITIAL = 0;
  public static final int LONG_TEMPLATE_ENTRY = 8;
  public static final int QUO_STRING = 2;
  public static final int SHORT_TEMPLATE_ENTRY = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\103\1\0\1\1\1\6\22\0\1\1\1\74\1\30"+
    "\1\14\1\7\1\102\1\77\1\31\1\65\1\66\1\13\1\26\1\70"+
    "\1\71\1\27\1\12\1\20\7\17\2\16\1\11\1\67\1\100\1\73"+
    "\1\72\1\75\1\10\1\15\1\61\2\15\1\25\1\15\21\2\1\22"+
    "\2\2\1\63\1\5\1\64\1\101\1\3\1\0\1\42\1\40\1\52"+
    "\1\44\1\35\1\45\1\53\1\56\1\37\1\2\1\43\1\47\1\24"+
    "\1\34\1\54\1\51\1\62\1\41\1\55\1\50\1\46\1\57\1\36"+
    "\1\21\1\60\1\2\1\32\1\76\1\33\1\23\53\0\1\2\12\0"+
    "\1\2\4\0\1\2\5\0\27\2\1\0\37\2\1\0\u01ca\2\4\0"+
    "\14\2\16\0\5\2\7\0\1\2\1\0\1\2\201\0\5\2\1\0"+
    "\2\2\2\0\4\2\10\0\1\2\1\0\3\2\1\0\1\2\1\0"+
    "\24\2\1\0\123\2\1\0\213\2\10\0\236\2\11\0\46\2\2\0"+
    "\1\2\7\0\47\2\110\0\33\2\5\0\3\2\55\0\53\2\25\0"+
    "\12\4\4\0\2\2\1\0\143\2\1\0\1\2\17\0\2\2\7\0"+
    "\2\2\12\4\3\2\2\0\1\2\20\0\1\2\1\0\36\2\35\0"+
    "\131\2\13\0\1\2\16\0\12\4\41\2\11\0\2\2\4\0\1\2"+
    "\5\0\26\2\4\0\1\2\11\0\1\2\3\0\1\2\27\0\31\2"+
    "\253\0\66\2\3\0\1\2\22\0\1\2\7\0\12\2\4\0\12\4"+
    "\1\0\7\2\1\0\7\2\5\0\10\2\2\0\2\2\2\0\26\2"+
    "\1\0\7\2\1\0\1\2\3\0\4\2\3\0\1\2\20\0\1\2"+
    "\15\0\2\2\1\0\3\2\4\0\12\4\2\2\23\0\6\2\4\0"+
    "\2\2\2\0\26\2\1\0\7\2\1\0\2\2\1\0\2\2\1\0"+
    "\2\2\37\0\4\2\1\0\1\2\7\0\12\4\2\0\3\2\20\0"+
    "\11\2\1\0\3\2\1\0\26\2\1\0\7\2\1\0\2\2\1\0"+
    "\5\2\3\0\1\2\22\0\1\2\17\0\2\2\4\0\12\4\25\0"+
    "\10\2\2\0\2\2\2\0\26\2\1\0\7\2\1\0\2\2\1\0"+
    "\5\2\3\0\1\2\36\0\2\2\1\0\3\2\4\0\12\4\1\0"+
    "\1\2\21\0\1\2\1\0\6\2\3\0\3\2\1\0\4\2\3\0"+
    "\2\2\1\0\1\2\1\0\2\2\3\0\2\2\3\0\3\2\3\0"+
    "\14\2\26\0\1\2\25\0\12\4\25\0\10\2\1\0\3\2\1\0"+
    "\27\2\1\0\12\2\1\0\5\2\3\0\1\2\32\0\2\2\6\0"+
    "\2\2\4\0\12\4\25\0\10\2\1\0\3\2\1\0\27\2\1\0"+
    "\12\2\1\0\5\2\3\0\1\2\40\0\1\2\1\0\2\2\4\0"+
    "\12\4\1\0\2\2\22\0\10\2\1\0\3\2\1\0\51\2\2\0"+
    "\1\2\20\0\1\2\21\0\2\2\4\0\12\4\12\0\6\2\5\0"+
    "\22\2\3\0\30\2\1\0\11\2\1\0\1\2\2\0\7\2\72\0"+
    "\60\2\1\0\2\2\14\0\7\2\11\0\12\4\47\0\2\2\1\0"+
    "\1\2\2\0\2\2\1\0\1\2\2\0\1\2\6\0\4\2\1\0"+
    "\7\2\1\0\3\2\1\0\1\2\1\0\1\2\2\0\2\2\1\0"+
    "\4\2\1\0\2\2\11\0\1\2\2\0\5\2\1\0\1\2\11\0"+
    "\12\4\2\0\2\2\42\0\1\2\37\0\12\4\26\0\10\2\1\0"+
    "\44\2\33\0\5\2\163\0\53\2\24\0\1\2\12\4\6\0\6\2"+
    "\4\0\4\2\3\0\1\2\3\0\2\2\7\0\3\2\4\0\15\2"+
    "\14\0\1\2\1\0\12\4\6\0\46\2\12\0\53\2\1\0\1\2"+
    "\3\0\u0149\2\1\0\4\2\2\0\7\2\1\0\1\2\1\0\4\2"+
    "\2\0\51\2\1\0\4\2\2\0\41\2\1\0\4\2\2\0\7\2"+
    "\1\0\1\2\1\0\4\2\2\0\17\2\1\0\71\2\1\0\4\2"+
    "\2\0\103\2\45\0\20\2\20\0\125\2\14\0\u026c\2\2\0\21\2"+
    "\1\0\32\2\5\0\113\2\25\0\15\2\1\0\4\2\16\0\22\2"+
    "\16\0\22\2\16\0\15\2\1\0\3\2\17\0\64\2\43\0\1\2"+
    "\4\0\1\2\3\0\12\4\46\0\12\4\6\0\130\2\10\0\51\2"+
    "\1\0\1\2\5\0\106\2\12\0\35\2\51\0\12\4\36\2\2\0"+
    "\5\2\13\0\54\2\25\0\7\2\10\0\12\4\46\0\27\2\11\0"+
    "\65\2\53\0\12\4\6\0\12\4\15\0\1\2\135\0\57\2\21\0"+
    "\7\2\4\0\12\4\51\0\36\2\15\0\2\2\12\4\6\0\46\2"+
    "\32\0\44\2\34\0\12\4\3\0\3\2\12\4\44\2\153\0\4\2"+
    "\1\0\4\2\16\0\300\2\100\0\u0116\2\2\0\6\2\2\0\46\2"+
    "\2\0\6\2\2\0\10\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\37\2\2\0\65\2\1\0\7\2\1\0\1\2\3\0\3\2"+
    "\1\0\7\2\3\0\4\2\2\0\6\2\4\0\15\2\5\0\3\2"+
    "\1\0\7\2\164\0\1\2\15\0\1\2\20\0\15\2\145\0\1\2"+
    "\4\0\1\2\2\0\12\2\1\0\1\2\3\0\5\2\6\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\4\2\1\0\13\2\2\0\4\2"+
    "\5\0\5\2\4\0\1\2\64\0\2\2\u0a7b\0\57\2\1\0\57\2"+
    "\1\0\205\2\6\0\4\2\21\0\46\2\12\0\66\2\11\0\1\2"+
    "\20\0\27\2\11\0\7\2\1\0\7\2\1\0\7\2\1\0\7\2"+
    "\1\0\7\2\1\0\7\2\1\0\7\2\1\0\7\2\120\0\1\2"+
    "\u01d5\0\2\2\52\0\5\2\5\0\2\2\4\0\126\2\6\0\3\2"+
    "\1\0\132\2\1\0\4\2\5\0\51\2\3\0\136\2\21\0\33\2"+
    "\65\0\20\2\u0200\0\u19b6\2\112\0\u51cc\2\64\0\u048d\2\103\0\56\2"+
    "\2\0\u010d\2\3\0\20\2\12\4\2\2\24\0\57\2\20\0\31\2"+
    "\10\0\106\2\61\0\11\2\2\0\147\2\2\0\4\2\1\0\2\2"+
    "\16\0\12\2\120\0\10\2\1\0\3\2\1\0\4\2\1\0\27\2"+
    "\35\0\64\2\16\0\62\2\34\0\12\4\30\0\6\2\3\0\1\2"+
    "\4\0\12\4\34\2\12\0\27\2\31\0\35\2\7\0\57\2\34\0"+
    "\1\2\12\4\46\0\51\2\27\0\3\2\1\0\10\2\4\0\12\4"+
    "\6\0\27\2\3\0\1\2\5\0\60\2\1\0\1\2\3\0\2\2"+
    "\2\0\5\2\2\0\1\2\1\0\1\2\30\0\3\2\43\0\6\2"+
    "\2\0\6\2\2\0\6\2\11\0\7\2\1\0\7\2\221\0\43\2"+
    "\15\0\12\4\6\0\u2ba4\2\14\0\27\2\4\0\61\2\u2104\0\u012e\2"+
    "\2\0\76\2\2\0\152\2\46\0\7\2\14\0\5\2\5\0\1\2"+
    "\1\0\12\2\1\0\15\2\1\0\5\2\1\0\1\2\1\0\2\2"+
    "\1\0\2\2\1\0\154\2\41\0\u016b\2\22\0\100\2\2\0\66\2"+
    "\50\0\14\2\164\0\5\2\1\0\207\2\23\0\12\4\7\0\32\2"+
    "\6\0\32\2\13\0\131\2\3\0\6\2\2\0\6\2\2\0\6\2"+
    "\2\0\3\2\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\2\1\1\4\1\5\1\6"+
    "\1\7\2\10\1\1\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\20\3\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\37\1\41\1\37\1\40"+
    "\2\42\3\40\1\43\1\44\3\0\1\45\1\0\1\46"+
    "\1\47\1\50\1\51\1\52\1\0\1\53\1\0\1\54"+
    "\1\55\1\0\7\3\1\56\1\57\4\3\1\60\10\3"+
    "\1\61\15\3\1\62\1\63\1\64\1\0\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\37\1\101\1\102\1\42\2\0\3\103"+
    "\16\45\1\47\1\104\1\105\1\0\1\106\1\107\1\110"+
    "\21\3\1\111\3\3\1\112\16\3\1\113\1\114\1\115"+
    "\1\42\1\103\4\45\1\116\16\45\1\0\2\104\1\106"+
    "\1\3\1\117\1\3\1\120\1\121\12\3\1\122\4\3"+
    "\1\123\1\124\6\3\1\125\1\126\6\3\1\127\23\45"+
    "\1\47\1\0\1\130\2\3\1\131\4\3\1\132\4\3"+
    "\1\133\2\3\1\134\1\135\4\3\1\136\1\137\3\3"+
    "\1\140\1\3\1\141\3\45\1\142\4\45\1\143\10\45"+
    "\1\144\1\3\1\145\1\3\1\146\1\147\1\3\1\150"+
    "\10\3\1\151\2\3\1\152\1\153\1\154\3\45\1\155"+
    "\2\45\1\156\1\157\6\45\1\160\3\3\1\161\1\162"+
    "\1\3\1\163\1\164\1\165\1\166\2\3\1\167\1\45"+
    "\1\170\5\45\1\171\1\45\1\172\2\3\1\173\1\174"+
    "\1\175\1\176\1\177\1\200\5\45\1\3\1\201\1\45"+
    "\1\202\1\45\1\203\1\204\1\205\1\206\1\207";

  private static int [] zzUnpackAction() {
    int [] result = new int[418];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u0154\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8"+
    "\0\u03fc\0\u0440\0\u0484\0\u0154\0\u0154\0\u0154\0\u0154\0\u04c8"+
    "\0\u050c\0\u0550\0\u0594\0\u05d8\0\u061c\0\u0660\0\u06a4\0\u06e8"+
    "\0\u072c\0\u0770\0\u07b4\0\u07f8\0\u083c\0\u0880\0\u08c4\0\u0154"+
    "\0\u0154\0\u0154\0\u0154\0\u0154\0\u0154\0\u0908\0\u094c\0\u0990"+
    "\0\u09d4\0\u0154\0\u0a18\0\u0a5c\0\u0aa0\0\u0ae4\0\u0b28\0\u0b6c"+
    "\0\u0bb0\0\u0bf4\0\u0154\0\u0c38\0\u0154\0\u0c7c\0\u0cc0\0\u0220"+
    "\0\u0264\0\u03fc\0\u0154\0\u0154\0\u0220\0\u0d04\0\u0d48\0\u0d8c"+
    "\0\u0dd0\0\u0e14\0\u0e58\0\u0154\0\u0154\0\u0e9c\0\u0ee0\0\u0154"+
    "\0\u0f24\0\u0154\0\u0154\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u1078"+
    "\0\u10bc\0\u1100\0\u1144\0\u1188\0\u01dc\0\u11cc\0\u1210\0\u1254"+
    "\0\u1298\0\u01dc\0\u12dc\0\u1320\0\u1364\0\u13a8\0\u13ec\0\u1430"+
    "\0\u1474\0\u14b8\0\u01dc\0\u14fc\0\u1540\0\u1584\0\u15c8\0\u160c"+
    "\0\u1650\0\u1694\0\u16d8\0\u171c\0\u1760\0\u17a4\0\u17e8\0\u182c"+
    "\0\u0154\0\u0154\0\u0154\0\u1870\0\u0154\0\u0154\0\u0154\0\u0154"+
    "\0\u0154\0\u0154\0\u0154\0\u0154\0\u0154\0\u18b4\0\u0154\0\u0154"+
    "\0\u0154\0\u18f8\0\u0154\0\u193c\0\u1980\0\u19c4\0\u0154\0\u0d48"+
    "\0\u0d04\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0"+
    "\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0"+
    "\0\u1e04\0\u0ee0\0\u1e48\0\u1e8c\0\u0154\0\u01dc\0\u1ed0\0\u1f14"+
    "\0\u1f58\0\u1f9c\0\u1fe0\0\u2024\0\u2068\0\u20ac\0\u20f0\0\u2134"+
    "\0\u2178\0\u21bc\0\u2200\0\u2244\0\u2288\0\u22cc\0\u2310\0\u01dc"+
    "\0\u2354\0\u2398\0\u23dc\0\u01dc\0\u2420\0\u2464\0\u24a8\0\u24ec"+
    "\0\u2530\0\u2574\0\u25b8\0\u25fc\0\u2640\0\u2684\0\u26c8\0\u270c"+
    "\0\u2750\0\u2794\0\u01dc\0\u0154\0\u0154\0\u27d8\0\u1980\0\u281c"+
    "\0\u2860\0\u28a4\0\u28e8\0\u0d8c\0\u292c\0\u2970\0\u29b4\0\u29f8"+
    "\0\u2a3c\0\u2a80\0\u2ac4\0\u2b08\0\u2b4c\0\u2b90\0\u2bd4\0\u2c18"+
    "\0\u2c5c\0\u2ca0\0\u2ce4\0\u2d28\0\u0154\0\u2d6c\0\u2db0\0\u01dc"+
    "\0\u2df4\0\u01dc\0\u01dc\0\u2e38\0\u2e7c\0\u2ec0\0\u2f04\0\u2f48"+
    "\0\u2f8c\0\u2fd0\0\u3014\0\u3058\0\u309c\0\u01dc\0\u30e0\0\u3124"+
    "\0\u3168\0\u31ac\0\u01dc\0\u01dc\0\u31f0\0\u3234\0\u3278\0\u32bc"+
    "\0\u3300\0\u3344\0\u01dc\0\u01dc\0\u3388\0\u33cc\0\u3410\0\u3454"+
    "\0\u3498\0\u34dc\0\u0c7c\0\u3520\0\u3564\0\u35a8\0\u35ec\0\u3630"+
    "\0\u3674\0\u36b8\0\u36fc\0\u3740\0\u3784\0\u37c8\0\u380c\0\u3850"+
    "\0\u3894\0\u38d8\0\u391c\0\u3960\0\u39a4\0\u39e8\0\u0154\0\u3a2c"+
    "\0\u01dc\0\u3a70\0\u3ab4\0\u01dc\0\u3af8\0\u3b3c\0\u3b80\0\u3bc4"+
    "\0\u01dc\0\u3c08\0\u3c4c\0\u3c90\0\u3cd4\0\u01dc\0\u3d18\0\u3d5c"+
    "\0\u01dc\0\u01dc\0\u3da0\0\u3de4\0\u3e28\0\u3e6c\0\u01dc\0\u01dc"+
    "\0\u3eb0\0\u3ef4\0\u3f38\0\u01dc\0\u3f7c\0\u0d8c\0\u3fc0\0\u4004"+
    "\0\u4048\0\u0d8c\0\u408c\0\u40d0\0\u4114\0\u4158\0\u0d8c\0\u419c"+
    "\0\u41e0\0\u4224\0\u4268\0\u42ac\0\u42f0\0\u4334\0\u4378\0\u0d8c"+
    "\0\u43bc\0\u01dc\0\u4400\0\u01dc\0\u01dc\0\u4444\0\u01dc\0\u4488"+
    "\0\u44cc\0\u4510\0\u4554\0\u4598\0\u45dc\0\u4620\0\u4664\0\u01dc"+
    "\0\u46a8\0\u46ec\0\u01dc\0\u01dc\0\u0d8c\0\u4730\0\u4774\0\u47b8"+
    "\0\u0d8c\0\u47fc\0\u4840\0\u0d8c\0\u0d8c\0\u4884\0\u48c8\0\u490c"+
    "\0\u4950\0\u4994\0\u49d8\0\u01dc\0\u4a1c\0\u4a60\0\u4aa4\0\u01dc"+
    "\0\u01dc\0\u4ae8\0\u01dc\0\u01dc\0\u01dc\0\u01dc\0\u4b2c\0\u4b70"+
    "\0\u0d8c\0\u4bb4\0\u0d8c\0\u4bf8\0\u4c3c\0\u4c80\0\u4cc4\0\u4d08"+
    "\0\u0d8c\0\u4d4c\0\u0d8c\0\u4d90\0\u4dd4\0\u01dc\0\u01dc\0\u01dc"+
    "\0\u01dc\0\u0d8c\0\u0d8c\0\u4e18\0\u4e5c\0\u4ea0\0\u4ee4\0\u4f28"+
    "\0\u4f6c\0\u01dc\0\u4fb0\0\u0d8c\0\u4ff4\0\u0d8c\0\u0d8c\0\u01dc"+
    "\0\u0d8c\0\u0d8c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[418];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\2\10\1\11\1\6\1\7\1\10\1\12"+
    "\1\13\1\14\1\15\1\16\1\10\2\17\1\20\2\10"+
    "\1\21\2\10\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\10"+
    "\1\37\1\40\1\41\1\10\1\42\1\43\1\44\1\10"+
    "\1\45\1\46\1\10\1\47\3\10\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\7\5\70\1\71"+
    "\1\70\1\72\20\70\1\73\53\70\5\74\1\71\1\74"+
    "\1\72\21\74\1\73\52\74\2\75\2\76\11\75\1\76"+
    "\3\75\2\76\1\75\2\76\6\75\14\76\1\77\12\76"+
    "\20\75\1\0\1\75\1\7\2\10\1\100\1\75\1\7"+
    "\1\10\1\101\1\13\1\14\1\15\1\16\1\10\2\17"+
    "\1\20\2\10\1\102\2\10\1\22\1\23\1\24\1\25"+
    "\1\103\1\104\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\10\1\37\1\40\1\41\1\10\1\42\1\43"+
    "\1\44\1\10\1\45\1\46\1\10\1\47\3\10\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\7"+
    "\105\0\1\7\4\0\1\7\74\0\1\7\2\0\3\10"+
    "\2\0\1\10\5\0\6\10\1\0\2\10\6\0\27\10"+
    "\25\0\1\105\11\0\3\105\4\0\1\106\1\0\1\107"+
    "\5\0\1\106\50\0\2\110\3\0\1\110\1\0\1\111"+
    "\3\0\1\110\3\0\2\110\1\0\2\110\6\0\27\110"+
    "\33\0\1\112\1\113\57\0\1\114\103\0\1\115\10\0"+
    "\6\16\1\0\74\16\5\0\1\105\11\0\3\17\4\0"+
    "\1\106\1\0\1\107\5\0\1\106\52\0\1\105\11\0"+
    "\1\105\2\116\2\117\2\0\1\106\1\0\1\107\5\0"+
    "\1\106\46\0\12\120\1\121\71\120\26\0\1\122\44\0"+
    "\1\123\14\0\1\107\11\0\3\107\6\0\1\124\56\0"+
    "\3\10\2\0\1\10\5\0\6\10\1\0\2\10\6\0"+
    "\1\10\1\125\10\10\1\126\14\10\23\0\3\10\2\0"+
    "\1\10\5\0\4\10\1\127\1\10\1\0\2\10\6\0"+
    "\1\130\12\10\1\131\13\10\23\0\3\10\2\0\1\10"+
    "\5\0\6\10\1\0\2\10\6\0\22\10\1\132\4\10"+
    "\23\0\3\10\2\0\1\10\5\0\6\10\1\0\1\133"+
    "\1\10\6\0\1\134\10\10\1\135\15\10\23\0\3\10"+
    "\2\0\1\10\5\0\6\10\1\0\2\10\6\0\5\10"+
    "\1\136\21\10\23\0\3\10\2\0\1\10\5\0\6\10"+
    "\1\0\2\10\6\0\1\10\1\137\25\10\23\0\3\10"+
    "\2\0\1\10\5\0\6\10\1\0\2\10\6\0\4\10"+
    "\1\140\22\10\23\0\3\10\2\0\1\10\5\0\6\10"+
    "\1\0\2\10\6\0\1\10\1\141\16\10\1\142\3\10"+
    "\1\143\2\10\23\0\3\10\2\0\1\10\5\0\6\10"+
    "\1\0\2\10\6\0\5\10\1\144\1\145\3\10\1\146"+
    "\5\10\1\147\6\10\23\0\3\10\2\0\1\10\5\0"+
    "\6\10\1\0\2\10\6\0\1\150\20\10\1\151\5\10"+
    "\23\0\3\10\2\0\1\10\5\0\6\10\1\0\2\10"+
    "\6\0\5\10\1\152\12\10\1\153\1\10\1\154\1\10"+
    "\1\155\2\10\23\0\3\10\2\0\1\10\5\0\6\10"+
    "\1\0\2\10\6\0\5\10\1\156\1\157\3\10\1\160"+
    "\14\10\23\0\3\10\2\0\1\10\5\0\6\10\1\0"+
    "\2\10\6\0\6\10\1\161\4\10\1\162\4\10\1\163"+
    "\6\10\23\0\3\10\2\0\1\10\5\0\6\10\1\0"+
    "\2\10\6\0\23\10\1\164\3\10\23\0\3\10\2\0"+
    "\1\10\5\0\6\10\1\0\2\10\6\0\2\10\1\165"+
    "\7\10\1\166\1\10\1\167\12\10\23\0\3\10\2\0"+
    "\1\10\5\0\6\10\1\0\2\10\6\0\6\10\1\170"+
    "\20\10\112\0\1\171\1\172\1\173\102\0\1\174\1\175"+
    "\102\0\1\176\1\177\103\0\1\200\103\0\1\201\2\0"+
    "\1\202\100\0\1\203\3\0\1\204\77\0\1\205\4\0"+
    "\1\206\76\0\1\207\103\0\1\210\10\0\5\70\1\0"+
    "\1\70\1\0\20\70\1\0\53\70\6\211\1\0\74\211"+
    "\3\0\2\212\11\0\1\212\3\0\2\212\1\0\2\212"+
    "\4\0\1\213\1\0\27\212\21\0\5\74\1\0\1\74"+
    "\1\0\21\74\1\0\52\74\2\0\3\76\10\0\6\76"+
    "\1\0\2\76\6\0\27\76\23\0\3\76\10\0\6\76"+
    "\1\0\2\76\6\0\22\76\1\214\4\76\25\0\1\215"+
    "\11\0\3\215\5\0\1\216\42\0\1\216\12\0\4\217"+
    "\1\220\11\217\3\220\4\217\1\221\1\217\1\0\5\217"+
    "\1\221\46\217\2\0\3\110\2\0\1\110\5\0\6\110"+
    "\1\0\2\110\6\0\27\110\23\0\2\110\3\0\1\110"+
    "\5\0\1\110\3\0\2\110\1\0\1\222\1\110\6\0"+
    "\1\223\3\110\1\224\1\225\1\226\1\227\1\230\1\231"+
    "\3\110\1\232\1\233\1\234\1\235\1\236\1\237\4\110"+
    "\21\0\6\112\1\0\74\112\1\0\13\240\1\241\70\240"+
    "\4\0\1\105\11\0\1\105\2\116\4\0\1\106\1\0"+
    "\1\107\5\0\1\106\63\0\4\242\4\0\1\242\7\0"+
    "\1\242\2\0\1\242\1\0\1\242\1\0\2\242\4\0"+
    "\1\242\6\0\1\242\22\0\5\121\1\243\4\121\1\244"+
    "\71\121\27\0\1\245\56\0\3\10\2\0\1\10\5\0"+
    "\6\10\1\0\2\10\6\0\2\10\1\246\20\10\1\247"+
    "\3\10\23\0\3\10\2\0\1\10\5\0\6\10\1\0"+
    "\2\10\6\0\13\10\1\250\13\10\23\0\3\10\2\0"+
    "\1\10\5\0\6\10\1\0\2\10\6\0\14\10\1\251"+
    "\12\10\23\0\3\10\2\0\1\10\5\0\6\10\1\0"+
    "\2\10\6\0\12\10\1\252\14\10\23\0\3\10\2\0"+
    "\1\10\5\0\6\10\1\0\2\10\6\0\21\10\1\253"+
    "\5\10\23\0\3\10\2\0\1\10\5\0\6\10\1\0"+
    "\2\10\6\0\3\10\1\254\23\10\23\0\3\10\2\0"+
    "\1\10\5\0\6\10\1\0\2\10\6\0\15\10\1\255"+
    "\11\10\23\0\3\10\2\0\1\10\5\0\6\10\1\0"+
    "\2\10\6\0\13\10\1\256\1\257\12\10\23\0\3\10"+
    "\2\0\1\10\5\0\6\10\1\0\2\10\6\0\1\10"+
    "\1\260\25\10\23\0\3\10\2\0\1\10\5\0\6\10"+
    "\1\0\2\10\6\0\14\10\1\261\12\10\23\0\3\10"+
    "\2\0\1\10\5\0\6\10\1\0\2\10\6\0\21\10"+
    "\1\262\5\10\23\0\3\10\2\0\1\10\5\0\6\10"+
    "\1\0\2\10\6\0\11\10\1\263\15\10\23\0\3\10"+
    "\2\0\1\10\5\0\6\10\1\0\2\10\6\0\1\264"+
    "\26\10\23\0\3\10\2\0\1\10\5\0\6\10\1\0"+
    "\2\10\6\0\20\10\1\265\6\10\23\0\3\10\2\0"+
    "\1\10\5\0\6\10\1\0\2\10\6\0\13\10\1\266"+
    "\13\10\23\0\3\10\2\0\1\10\5\0\6\10\1\0"+
    "\2\10\6\0\1\267\26\10\23\0\3\10\2\0\1\10"+
    "\5\0\6\10\1\0\2\10\6\0\5\10\1\270\21\10"+
    "\23\0\3\10\2\0\1\10\5\0\6\10\1\0\2\10"+
    "\6\0\14\10\1\271\12\10\23\0\3\10\2\0\1\10"+
    "\5\0\6\10\1\0\2\10\6\0\3\10\1\272\23\10"+
    "\23\0\3\10\2\0\1\10\5\0\6\10\1\0\2\10"+
    "\6\0\12\10\1\273\11\10\1\274\2\10\23\0\3\10"+
    "\2\0\1\10\5\0\6\10\1\0\2\10\6\0\3\10"+
    "\1\275\1\10\1\276\21\10\23\0\3\10\2\0\1\10"+
    "\5\0\6\10\1\0\2\10\6\0\15\10\1\277\11\10"+
    "\23\0\3\10\2\0\1\10\5\0\6\10\1\0\2\10"+
    "\6\0\3\10\1\300\23\10\23\0\3\10\2\0\1\10"+
    "\5\0\6\10\1\0\2\10\6\0\16\10\1\301\10\10"+
    "\23\0\3\10\2\0\1\10\5\0\6\10\1\0\2\10"+
    "\6\0\4\10\1\302\22\10\23\0\3\10\2\0\1\10"+
    "\5\0\6\10\1\0\2\10\6\0\14\10\1\303\4\10"+
    "\1\304\5\10\23\0\3\10\2\0\1\10\5\0\6\10"+
    "\1\0\2\10\6\0\6\10\1\305\20\10\23\0\3\10"+
    "\2\0\1\10\5\0\6\10\1\0\2\10\6\0\1\306"+
    "\26\10\23\0\3\10\2\0\1\10\5\0\6\10\1\0"+
    "\2\10\6\0\1\10\1\307\25\10\23\0\3\10\2\0"+
    "\1\10\5\0\6\10\1\0\2\10\6\0\3\10\1\310"+
    "\23\10\23\0\3\10\2\0\1\10\5\0\6\10\1\0"+
    "\2\10\6\0\15\10\1\311\11\10\23\0\3\10\2\0"+
    "\1\10\5\0\6\10\1\0\2\10\6\0\6\10\1\312"+
    "\20\10\23\0\3\10\2\0\1\10\5\0\6\10\1\0"+
    "\2\10\6\0\5\10\1\313\21\10\114\0\1\314\103\0"+
    "\1\315\12\0\3\212\10\0\6\212\1\0\2\212\6\0"+
    "\27\212\23\0\3\76\10\0\6\76\1\0\2\76\6\0"+
    "\3\76\1\316\23\76\21\0\4\217\1\317\11\217\3\317"+
    "\6\217\1\0\54\217\4\0\1\215\11\0\3\215\65\0"+
    "\3\110\2\0\1\110\5\0\6\110\1\0\2\110\6\0"+
    "\1\110\1\320\4\110\1\321\20\110\23\0\3\110\2\0"+
    "\1\110\5\0\6\110\1\0\2\110\6\0\6\110\1\322"+
    "\11\110\1\323\1\324\5\110\23\0\3\110\2\0\1\110"+
    "\5\0\6\110\1\0\2\110\6\0\3\110\1\325\6\110"+
    "\1\326\14\110\23\0\3\110\2\0\1\110\5\0\6\110"+
    "\1\0\2\110\6\0\1\110\1\327\25\110\23\0\3\110"+
    "\2\0\1\110\5\0\6\110\1\0\2\110\6\0\12\110"+
    "\1\330\14\110\23\0\3\110\2\0\1\110\5\0\6\110"+
    "\1\0\2\110\6\0\1\110\1\331\25\110\23\0\3\110"+
    "\2\0\1\110\5\0\6\110\1\0\2\110\6\0\1\110"+
    "\1\332\25\110\23\0\3\110\2\0\1\110\5\0\6\110"+
    "\1\0\2\110\6\0\3\110\1\333\2\110\1\334\20\110"+
    "\23\0\3\110\2\0\1\110\5\0\6\110\1\0\2\110"+
    "\6\0\5\110\1\335\21\110\23\0\3\110\2\0\1\110"+
    "\5\0\6\110\1\0\2\110\6\0\20\110\1\336\6\110"+
    "\23\0\3\110\2\0\1\110\5\0\6\110\1\0\2\110"+
    "\6\0\1\110\1\337\25\110\23\0\3\110\2\0\1\110"+
    "\5\0\6\110\1\0\2\110\6\0\23\110\1\340\3\110"+
    "\23\0\3\110\2\0\1\110\5\0\6\110\1\0\2\110"+
    "\6\0\1\110\1\341\25\110\23\0\3\110\2\0\1\110"+
    "\5\0\6\110\1\0\2\110\6\0\6\110\1\342\20\110"+
    "\21\0\13\240\1\343\70\240\12\344\1\345\1\241\70\344"+
    "\5\121\1\243\4\121\1\346\71\121\24\0\1\244\12\0"+
    "\1\244\6\0\1\244\4\0\1\244\1\0\1\244\30\0"+
    "\3\10\2\0\1\10\5\0\6\10\1\0\2\10\6\0"+
    "\1\10\1\347\25\10\23\0\3\10\2\0\1\10\5\0"+
    "\6\10\1\0\2\10\6\0\13\10\1\350\13\10\23\0"+
    "\3\10\2\0\1\10\5\0\6\10\1\0\2\10\6\0"+
    "\1\10\1\351\25\10\23\0\3\10\2\0\1\10\5\0"+
    "\6\10\1\0\1\352\1\10\6\0\27\10\23\0\3\10"+
    "\2\0\1\10\5\0\6\10\1\0\2\10\6\0\1\10"+
    "\1\353\25\10\23\0\3\10\2\0\1\10\5\0\6\10"+
    "\1\0\2\10\6\0\13\10\1\354\13\10\23\0\3\10"+
    "\2\0\1\10\5\0\6\10\1\0\2\10\6\0\13\10"+
    "\1\355\4\10\1\356\6\10\23\0\3\10\2\0\1\10"+
    "\5\0\6\10\1\0\2\10\6\0\3\10\1\357\23\10"+
    "\23\0\3\10\2\0\1\10\5\0\6\10\1\0\2\10"+
    "\6\0\1\10\1\360\25\10\23\0\3\10\2\0\1\10"+
    "\5\0\6\10\1\0\2\10\6\0\6\10\1\361\20\10"+
    "\23\0\3\10\2\0\1\10\5\0\6\10\1\0\2\10"+
    "\6\0\12\10\1\362\14\10\23\0\3\10\2\0\1\10"+
    "\5\0\6\10\1\0\2\10\6\0\14\10\1\363\12\10"+
    "\23\0\3\10\2\0\1\10\5\0\6\10\1\0\2\10"+
    "\6\0\6\10\1\364\20\10\23\0\3\10\2\0\1\10"+
    "\5\0\6\10\1\0\2\10\6\0\6\10\1\365\20\10"+
    "\23\0\3\10\2\0\1\10\5\0\6\10\1\0\1\366"+
    "\1\10\6\0\27\10\23\0\3\10\2\0\1\10\5\0"+
    "\6\10\1\0\2\10\6\0\21\10\1\367\5\10\23\0"+
    "\3\10\2\0\1\10\5\0\6\10\1\0\2\10\6\0"+
    "\16\10\1\370\10\10\23\0\3\10\2\0\1\10\5\0"+
    "\6\10\1\0\2\10\6\0\24\10\1\371\2\10\23\0"+
    "\3\10\2\0\1\10\5\0\6\10\1\0\2\10\6\0"+
    "\1\372\26\10\23\0\3\10\2\0\1\10\5\0\6\10"+
    "\1\0\2\10\6\0\1\10\1\373\25\10\23\0\3\10"+
    "\2\0\1\10\5\0\6\10\1\0\2\10\6\0\21\10"+
    "\1\374\5\10\23\0\3\10\2\0\1\10\5\0\6\10"+
    "\1\0\2\10\6\0\20\10\1\375\6\10\23\0\3\10"+
    "\2\0\1\10\5\0\6\10\1\0\2\10\6\0\1\10"+
    "\1\376\25\10\23\0\3\10\2\0\1\10\5\0\6\10"+
    "\1\0\2\10\6\0\23\10\1\377\3\10\23\0\3\10"+
    "\2\0\1\10\5\0\6\10\1\0\2\10\6\0\7\10"+
    "\1\u0100\17\10\23\0\3\10\2\0\1\10\5\0\6\10"+
    "\1\0\2\10\6\0\13\10\1\u0101\13\10\23\0\3\10"+
    "\2\0\1\10\5\0\6\10\1\0\2\10\6\0\16\10"+
    "\1\u0102\10\10\23\0\3\10\2\0\1\10\5\0\6\10"+
    "\1\0\2\10\6\0\1\10\1\u0103\12\10\1\u0104\12\10"+
    "\23\0\3\10\2\0\1\10\5\0\6\10\1\0\2\10"+
    "\6\0\21\10\1\u0105\5\10\23\0\3\10\2\0\1\10"+
    "\5\0\6\10\1\0\2\10\6\0\14\10\1\u0106\12\10"+
    "\23\0\3\10\2\0\1\10\5\0\6\10\1\0\2\10"+
    "\6\0\5\10\1\u0107\21\10\23\0\3\10\2\0\1\10"+
    "\5\0\6\10\1\0\2\10\6\0\14\10\1\u0108\12\10"+
    "\23\0\3\10\2\0\1\10\5\0\6\10\1\0\2\10"+
    "\6\0\1\10\1\u0109\25\10\23\0\3\10\2\0\1\10"+
    "\5\0\6\10\1\0\2\10\6\0\14\10\1\u010a\12\10"+
    "\23\0\3\76\10\0\6\76\1\0\2\76\6\0\21\76"+
    "\1\u010b\5\76\23\0\3\110\2\0\1\110\5\0\6\110"+
    "\1\0\2\110\6\0\14\110\1\u010c\12\110\23\0\3\110"+
    "\2\0\1\110\5\0\6\110\1\0\2\110\6\0\16\110"+
    "\1\u010d\10\110\23\0\3\110\2\0\1\110\5\0\6\110"+
    "\1\0\2\110\6\0\14\110\1\u010e\12\110\23\0\3\110"+
    "\2\0\1\110\5\0\6\110\1\0\2\110\6\0\10\110"+
    "\1\u010f\16\110\23\0\3\110\2\0\1\110\5\0\6\110"+
    "\1\0\2\110\6\0\1\u0110\13\110\1\u0111\12\110\23\0"+
    "\3\110\2\0\1\110\5\0\6\110\1\0\2\110\6\0"+
    "\3\110\1\u0112\23\110\23\0\3\110\2\0\1\110\5\0"+
    "\6\110\1\0\2\110\6\0\26\110\1\u0113\23\0\3\110"+
    "\2\0\1\110\5\0\6\110\1\0\2\110\6\0\14\110"+
    "\1\u0114\12\110\23\0\3\110\2\0\1\110\5\0\6\110"+
    "\1\0\2\110\6\0\1\110\1\u0115\25\110\23\0\3\110"+
    "\2\0\1\110\5\0\6\110\1\0\2\110\6\0\4\110"+
    "\1\u0116\22\110\23\0\3\110\2\0\1\110\5\0\6\110"+
    "\1\0\2\110\6\0\1\u0117\26\110\23\0\3\110\2\0"+
    "\1\110\5\0\6\110\1\0\2\110\6\0\7\110\1\u0118"+
    "\17\110\23\0\3\110\2\0\1\110\5\0\6\110\1\0"+
    "\2\110\6\0\20\110\1\u0119\6\110\23\0\3\110\2\0"+
    "\1\110\5\0\6\110\1\0\2\110\6\0\5\110\1\u011a"+
    "\21\110\23\0\3\110\2\0\1\110\5\0\6\110\1\0"+
    "\2\110\6\0\14\110\1\u011b\12\110\23\0\3\110\2\0"+
    "\1\110\5\0\6\110\1\0\2\110\6\0\1\110\1\u011c"+
    "\25\110\23\0\3\110\2\0\1\110\5\0\6\110\1\0"+
    "\2\110\6\0\14\110\1\u011d\12\110\23\0\3\110\2\0"+
    "\1\110\5\0\6\110\1\0\2\110\6\0\16\110\1\u011e"+
    "\10\110\21\0\12\240\1\u011f\1\343\70\240\13\344\1\u0120"+
    "\70\344\5\121\1\243\4\121\1\244\11\121\1\346\12\121"+
    "\1\346\6\121\1\346\4\121\1\346\1\121\1\346\26\121"+
    "\2\0\3\10\2\0\1\10\5\0\6\10\1\0\2\10"+
    "\6\0\5\10\1\u0121\21\10\23\0\3\10\2\0\1\10"+
    "\5\0\6\10\1\0\2\10\6\0\1\u0122\4\10\1\u0123"+
    "\21\10\23\0\3\10\2\0\1\10\5\0\6\10\1\0"+
    "\2\10\6\0\1\10\1\u0124\25\10\23\0\3\10\2\0"+
    "\1\10\5\0\6\10\1\0\2\10\6\0\1\10\1\u0125"+
    "\25\10\23\0\3\10\2\0\1\10\5\0\6\10\1\0"+
    "\2\10\6\0\5\10\1\u0126\21\10\23\0\3\10\2\0"+
    "\1\10\5\0\6\10\1\0\2\10\6\0\1\u0127\26\10"+
    "\23\0\3\10\2\0\1\10\5\0\6\10\1\0\2\10"+
    "\6\0\5\10\1\u0128\21\10\23\0\3\10\2\0\1\10"+
    "\5\0\6\10\1\0\2\10\6\0\7\10\1\u0129\17\10"+
    "\23\0\3\10\2\0\1\10\5\0\6\10\1\0\2\10"+
    "\6\0\5\10\1\u012a\21\10\23\0\3\10\2\0\1\10"+
    "\5\0\6\10\1\0\2\10\6\0\5\10\1\u012b\21\10"+
    "\23\0\3\10\2\0\1\10\5\0\6\10\1\0\2\10"+
    "\6\0\12\10\1\u012c\14\10\23\0\3\10\2\0\1\10"+
    "\5\0\6\10\1\0\1\u012d\1\10\6\0\27\10\23\0"+
    "\3\10\2\0\1\10\5\0\6\10\1\0\2\10\6\0"+
    "\1\10\1\u012e\25\10\23\0\3\10\2\0\1\10\5\0"+
    "\6\10\1\0\2\10\6\0\14\10\1\u012f\12\10\23\0"+
    "\3\10\2\0\1\10\5\0\6\10\1\0\2\10\6\0"+
    "\15\10\1\u0130\11\10\23\0\3\10\2\0\1\10\5\0"+
    "\6\10\1\0\2\10\6\0\17\10\1\u0131\7\10\23\0"+
    "\3\10\2\0\1\10\5\0\6\10\1\0\2\10\6\0"+
    "\2\10\1\u0132\24\10\23\0\3\10\2\0\1\10\5\0"+
    "\6\10\1\0\2\10\6\0\10\10\1\u0133\16\10\23\0"+
    "\3\10\2\0\1\10\5\0\6\10\1\0\2\10\6\0"+
    "\6\10\1\u0134\20\10\23\0\3\10\2\0\1\10\5\0"+
    "\6\10\1\0\2\10\6\0\6\10\1\u0135\20\10\23\0"+
    "\3\10\2\0\1\10\5\0\6\10\1\0\2\10\6\0"+
    "\3\10\1\u0136\23\10\23\0\3\10\2\0\1\10\5\0"+
    "\6\10\1\0\2\10\6\0\22\10\1\u0137\4\10\23\0"+
    "\3\10\2\0\1\10\5\0\6\10\1\0\2\10\6\0"+
    "\21\10\1\u0138\5\10\23\0\3\10\2\0\1\10\5\0"+
    "\6\10\1\0\2\10\6\0\3\10\1\u0139\23\10\23\0"+
    "\3\10\2\0\1\10\5\0\6\10\1\0\2\10\6\0"+
    "\5\10\1\u013a\21\10\23\0\3\10\2\0\1\10\5\0"+
    "\6\10\1\0\2\10\6\0\16\10\1\u013b\10\10\23\0"+
    "\3\10\2\0\1\10\5\0\6\10\1\0\2\10\6\0"+
    "\5\10\1\u013c\21\10\23\0\3\10\2\0\1\10\5\0"+
    "\6\10\1\0\2\10\6\0\3\10\1\u013d\23\10\23\0"+
    "\3\110\2\0\1\110\5\0\6\110\1\0\2\110\6\0"+
    "\6\110\1\u013e\20\110\23\0\3\110\2\0\1\110\5\0"+
    "\6\110\1\0\2\110\6\0\5\110\1\u013f\21\110\23\0"+
    "\3\110\2\0\1\110\5\0\6\110\1\0\2\110\6\0"+
    "\3\110\1\u0140\23\110\23\0\3\110\2\0\1\110\5\0"+
    "\6\110\1\0\2\110\6\0\1\110\1\u0141\25\110\23\0"+
    "\3\110\2\0\1\110\5\0\6\110\1\0\2\110\6\0"+
    "\10\110\1\u0142\16\110\23\0\3\110\2\0\1\110\5\0"+
    "\6\110\1\0\1\u0143\1\110\6\0\27\110\23\0\3\110"+
    "\2\0\1\110\5\0\6\110\1\0\2\110\6\0\13\110"+
    "\1\u0144\13\110\23\0\3\110\2\0\1\110\5\0\6\110"+
    "\1\0\2\110\6\0\12\110\1\u0145\14\110\23\0\3\110"+
    "\2\0\1\110\5\0\6\110\1\0\2\110\6\0\20\110"+
    "\1\u0146\6\110\23\0\3\110\2\0\1\110\5\0\6\110"+
    "\1\0\2\110\6\0\15\110\1\u0147\11\110\23\0\3\110"+
    "\2\0\1\110\5\0\6\110\1\0\2\110\6\0\12\110"+
    "\1\u0148\14\110\23\0\3\110\2\0\1\110\5\0\6\110"+
    "\1\0\2\110\6\0\6\110\1\u0149\20\110\23\0\3\110"+
    "\2\0\1\110\5\0\6\110\1\0\2\110\6\0\1\110"+
    "\1\u014a\25\110\23\0\3\110\2\0\1\110\5\0\6\110"+
    "\1\0\2\110\6\0\14\110\1\u014b\12\110\23\0\3\110"+
    "\2\0\1\110\5\0\6\110\1\0\2\110\6\0\1\110"+
    "\1\u014c\25\110\23\0\3\110\2\0\1\110\5\0\6\110"+
    "\1\0\2\110\6\0\14\110\1\u014d\12\110\23\0\3\110"+
    "\2\0\1\110\5\0\6\110\1\0\2\110\6\0\5\110"+
    "\1\u014e\21\110\23\0\3\110\2\0\1\110\5\0\6\110"+
    "\1\0\2\110\6\0\14\110\1\u014f\12\110\23\0\3\110"+
    "\2\0\1\110\5\0\6\110\1\0\2\110\6\0\7\110"+
    "\1\u0150\17\110\21\0\12\344\1\345\1\u0120\70\344\2\0"+
    "\3\10\2\0\1\10\5\0\6\10\1\0\2\10\6\0"+
    "\10\10\1\u0151\16\10\23\0\3\10\2\0\1\10\5\0"+
    "\6\10\1\0\2\10\6\0\1\u0152\26\10\23\0\3\10"+
    "\2\0\1\10\5\0\6\10\1\0\1\u0153\1\10\6\0"+
    "\27\10\23\0\3\10\2\0\1\10\5\0\6\10\1\0"+
    "\2\10\6\0\14\10\1\u0154\12\10\23\0\3\10\2\0"+
    "\1\10\5\0\6\10\1\0\2\10\6\0\1\10\1\u0155"+
    "\25\10\23\0\3\10\2\0\1\10\5\0\6\10\1\0"+
    "\2\10\6\0\11\10\1\u0156\15\10\23\0\3\10\2\0"+
    "\1\10\5\0\6\10\1\0\2\10\6\0\1\u0157\26\10"+
    "\23\0\3\10\2\0\1\10\5\0\6\10\1\0\2\10"+
    "\6\0\6\10\1\u0158\20\10\23\0\3\10\2\0\1\10"+
    "\5\0\6\10\1\0\2\10\6\0\13\10\1\u0159\13\10"+
    "\23\0\3\10\2\0\1\10\5\0\6\10\1\0\2\10"+
    "\6\0\3\10\1\u015a\23\10\23\0\3\10\2\0\1\10"+
    "\5\0\6\10\1\0\2\10\6\0\3\10\1\u015b\23\10"+
    "\23\0\3\10\2\0\1\10\5\0\6\10\1\0\2\10"+
    "\6\0\1\10\1\u015c\25\10\23\0\3\10\2\0\1\10"+
    "\5\0\6\10\1\0\2\10\6\0\1\10\1\u015d\25\10"+
    "\23\0\3\10\2\0\1\10\5\0\6\10\1\0\2\10"+
    "\6\0\14\10\1\u015e\12\10\23\0\3\10\2\0\1\10"+
    "\5\0\6\10\1\0\2\10\6\0\17\10\1\u015f\7\10"+
    "\23\0\3\10\2\0\1\10\5\0\6\10\1\0\2\10"+
    "\6\0\16\10\1\u0160\10\10\23\0\3\10\2\0\1\10"+
    "\5\0\6\10\1\0\2\10\6\0\1\u0161\26\10\23\0"+
    "\3\10\2\0\1\10\5\0\6\10\1\0\2\10\6\0"+
    "\3\10\1\u0162\23\10\23\0\3\10\2\0\1\10\5\0"+
    "\6\10\1\0\2\10\6\0\22\10\1\u0163\4\10\23\0"+
    "\3\10\2\0\1\10\5\0\6\10\1\0\2\10\6\0"+
    "\16\10\1\u0164\10\10\23\0\3\110\2\0\1\110\5\0"+
    "\6\110\1\0\2\110\6\0\20\110\1\u0165\6\110\23\0"+
    "\3\110\2\0\1\110\5\0\6\110\1\0\2\110\6\0"+
    "\23\110\1\u0166\3\110\23\0\3\110\2\0\1\110\5\0"+
    "\6\110\1\0\2\110\6\0\4\110\1\u0167\22\110\23\0"+
    "\3\110\2\0\1\110\5\0\6\110\1\0\2\110\6\0"+
    "\6\110\1\u0168\20\110\23\0\3\110\2\0\1\110\5\0"+
    "\6\110\1\0\2\110\6\0\10\110\1\u0169\16\110\23\0"+
    "\3\110\2\0\1\110\5\0\6\110\1\0\2\110\6\0"+
    "\3\110\1\u016a\23\110\23\0\3\110\2\0\1\110\5\0"+
    "\6\110\1\0\2\110\6\0\25\110\1\u016b\1\110\23\0"+
    "\3\110\2\0\1\110\5\0\6\110\1\0\2\110\6\0"+
    "\17\110\1\u016c\7\110\23\0\3\110\2\0\1\110\5\0"+
    "\6\110\1\0\2\110\6\0\13\110\1\u016d\13\110\23\0"+
    "\3\110\2\0\1\110\5\0\6\110\1\0\1\110\1\u016e"+
    "\6\0\27\110\23\0\3\110\2\0\1\110\5\0\6\110"+
    "\1\0\2\110\6\0\1\110\1\u016f\25\110\23\0\1\110"+
    "\1\u0170\1\110\2\0\1\110\5\0\6\110\1\0\2\110"+
    "\6\0\27\110\23\0\3\110\2\0\1\110\5\0\6\110"+
    "\1\0\2\110\6\0\1\110\1\u0171\25\110\23\0\3\110"+
    "\2\0\1\110\5\0\6\110\1\0\2\110\6\0\13\110"+
    "\1\u0172\13\110\23\0\3\110\2\0\1\110\5\0\6\110"+
    "\1\0\2\110\6\0\1\110\1\u0173\25\110\23\0\3\10"+
    "\2\0\1\10\5\0\6\10\1\0\2\10\6\0\21\10"+
    "\1\u0174\5\10\23\0\3\10\2\0\1\10\5\0\6\10"+
    "\1\0\2\10\6\0\1\10\1\u0175\25\10\23\0\3\10"+
    "\2\0\1\10\5\0\6\10\1\0\2\10\6\0\6\10"+
    "\1\u0176\20\10\23\0\3\10\2\0\1\10\5\0\6\10"+
    "\1\0\2\10\6\0\16\10\1\u0177\10\10\23\0\3\10"+
    "\2\0\1\10\5\0\6\10\1\0\2\10\6\0\14\10"+
    "\1\u0178\12\10\23\0\3\10\2\0\1\10\5\0\6\10"+
    "\1\0\2\10\6\0\16\10\1\u0179\10\10\23\0\3\10"+
    "\2\0\1\10\5\0\6\10\1\0\2\10\6\0\20\10"+
    "\1\u017a\6\10\23\0\3\10\2\0\1\10\5\0\6\10"+
    "\1\0\2\10\6\0\10\10\1\u017b\16\10\23\0\3\10"+
    "\2\0\1\10\5\0\6\10\1\0\2\10\6\0\11\10"+
    "\1\u017c\15\10\23\0\3\10\2\0\1\10\5\0\6\10"+
    "\1\0\2\10\6\0\1\10\1\u017d\25\10\23\0\3\10"+
    "\2\0\1\10\5\0\6\10\1\0\2\10\6\0\1\10"+
    "\1\u017e\25\10\23\0\3\10\2\0\1\10\5\0\6\10"+
    "\1\0\2\10\6\0\12\10\1\u017f\14\10\23\0\3\10"+
    "\2\0\1\10\5\0\6\10\1\0\2\10\6\0\10\10"+
    "\1\u0180\16\10\23\0\3\110\2\0\1\110\5\0\6\110"+
    "\1\0\2\110\6\0\1\110\1\u0181\25\110\23\0\3\110"+
    "\2\0\1\110\5\0\6\110\1\0\2\110\6\0\12\110"+
    "\1\u0182\14\110\23\0\3\110\2\0\1\110\5\0\6\110"+
    "\1\0\2\110\6\0\15\110\1\u0183\11\110\23\0\3\110"+
    "\2\0\1\110\5\0\6\110\1\0\2\110\6\0\5\110"+
    "\1\u0184\21\110\23\0\3\110\2\0\1\110\5\0\6\110"+
    "\1\0\2\110\6\0\12\110\1\u0185\14\110\23\0\3\110"+
    "\2\0\1\110\5\0\6\110\1\0\2\110\6\0\1\u0186"+
    "\26\110\23\0\3\110\2\0\1\110\5\0\6\110\1\0"+
    "\2\110\6\0\16\110\1\u0187\10\110\23\0\3\110\2\0"+
    "\1\110\5\0\6\110\1\0\2\110\6\0\6\110\1\u0188"+
    "\20\110\23\0\3\110\2\0\1\110\5\0\6\110\1\0"+
    "\2\110\6\0\5\110\1\u0189\21\110\23\0\3\110\2\0"+
    "\1\110\5\0\6\110\1\0\2\110\6\0\20\110\1\u018a"+
    "\6\110\23\0\3\110\2\0\1\110\5\0\6\110\1\0"+
    "\2\110\6\0\5\110\1\u018b\21\110\23\0\3\10\2\0"+
    "\1\10\5\0\6\10\1\0\2\10\6\0\1\u018c\26\10"+
    "\23\0\3\10\2\0\1\10\5\0\6\10\1\0\2\10"+
    "\6\0\16\10\1\u018d\10\10\23\0\3\10\2\0\1\10"+
    "\5\0\6\10\1\0\2\10\6\0\14\10\1\u018e\12\10"+
    "\23\0\3\10\2\0\1\10\5\0\6\10\1\0\2\10"+
    "\6\0\1\u018f\26\10\23\0\3\10\2\0\1\10\5\0"+
    "\6\10\1\0\2\10\6\0\1\10\1\u0190\25\10\23\0"+
    "\3\10\2\0\1\10\5\0\6\10\1\0\2\10\6\0"+
    "\1\10\1\u0191\25\10\23\0\3\110\2\0\1\110\5\0"+
    "\6\110\1\0\2\110\6\0\17\110\1\u0192\7\110\23\0"+
    "\3\110\2\0\1\110\5\0\6\110\1\0\2\110\6\0"+
    "\1\110\1\u0193\25\110\23\0\3\110\2\0\1\110\5\0"+
    "\6\110\1\0\2\110\6\0\3\110\1\u0194\23\110\23\0"+
    "\3\110\2\0\1\110\5\0\6\110\1\0\2\110\6\0"+
    "\12\110\1\u0195\14\110\23\0\3\110\2\0\1\110\5\0"+
    "\6\110\1\0\2\110\6\0\14\110\1\u0196\12\110\23\0"+
    "\3\110\2\0\1\110\5\0\6\110\1\0\2\110\6\0"+
    "\15\110\1\u0197\11\110\23\0\3\110\2\0\1\110\5\0"+
    "\6\110\1\0\2\110\6\0\6\110\1\u0198\20\110\23\0"+
    "\3\10\2\0\1\10\5\0\6\10\1\0\2\10\6\0"+
    "\14\10\1\u0199\12\10\23\0\3\10\2\0\1\10\5\0"+
    "\6\10\1\0\2\10\6\0\1\10\1\u019a\25\10\23\0"+
    "\3\110\2\0\1\110\5\0\6\110\1\0\2\110\6\0"+
    "\13\110\1\u019b\13\110\23\0\3\110\2\0\1\110\5\0"+
    "\6\110\1\0\1\u019c\1\110\6\0\27\110\23\0\3\110"+
    "\2\0\1\110\5\0\6\110\1\0\2\110\6\0\1\110"+
    "\1\u019d\25\110\23\0\3\110\2\0\1\110\5\0\6\110"+
    "\1\0\2\110\6\0\3\110\1\u019e\23\110\23\0\3\110"+
    "\2\0\1\110\5\0\6\110\1\0\2\110\6\0\10\110"+
    "\1\u019f\16\110\23\0\3\10\2\0\1\10\5\0\6\10"+
    "\1\0\2\10\6\0\21\10\1\u01a0\5\10\23\0\3\110"+
    "\2\0\1\110\5\0\6\110\1\0\2\110\6\0\10\110"+
    "\1\u01a1\16\110\23\0\3\110\2\0\1\110\5\0\6\110"+
    "\1\0\2\110\6\0\10\110\1\u01a2\16\110\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20536];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\4\1\1\11\10\1\4\11\20\1\6\11"+
    "\4\1\1\11\10\1\1\11\1\1\1\11\5\1\2\11"+
    "\3\0\1\1\1\0\2\1\2\11\1\1\1\0\1\11"+
    "\1\0\2\11\1\0\44\1\3\11\1\0\11\11\1\1"+
    "\3\11\1\1\1\11\1\1\2\0\1\11\23\1\1\0"+
    "\1\1\1\11\46\1\2\11\25\1\1\0\1\1\1\11"+
    "\71\1\1\11\1\0\202\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[418];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private static final class State {
        final int lBraceCount;
        final int state;

        public State(int state, int lBraceCount) {
            this.state = state;
            this.lBraceCount = lBraceCount;
        }

        @Override
        public String toString() {
            return "yystate = " + state + (lBraceCount == 0 ? "" : "lBraceCount = " + lBraceCount);
        }
    }

    private final Stack<State> states = new Stack<State>();
    private int lBraceCount;

    private int commentStart;
    private int commentDepth;

    private void pushState(int state) {
        states.push(new State(yystate(), lBraceCount));
        lBraceCount = 0;
        yybegin(state);
    }

    private String getStateName(int state) {
        if(state == SHORT_TEMPLATE_ENTRY) {
          return "SHORT_TEMPLATE_ENTRY";
        }
        if(state == LONG_TEMPLATE_ENTRY) {
          return "LONG_TEMPLATE_ENTRY";
        }
        if(state == QUO_STRING) {
          return "QUO_STRING";
        }
        if(state == APOS_STRING) {
          return "APOS_STRING";
        }
        return null;
    }

    private void popState() {
        State state = states.pop();
        lBraceCount = state.lBraceCount;
        yybegin(state.state);
    }

    public _HaxeLexer() {
      this((java.io.Reader)null);
    }


  public _HaxeLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _HaxeLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1706) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 122: 
          { return KSETTER;
          }
        case 136: break;
        case 47: 
          { return KIF ;
          }
        case 137: break;
        case 21: 
          { return OMINUS;
          }
        case 138: break;
        case 43: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return OCOMPLEMENT;
          }
        case 139: break;
        case 106: 
          { return KSWITCH ;
          }
        case 140: break;
        case 39: 
          { return MML_COMMENT;
          }
        case 141: break;
        case 27: 
          { return OBIT_AND;
          }
        case 142: break;
        case 25: 
          { return OQUEST;
          }
        case 143: break;
        case 5: 
          { return OQUOTIENT;
          }
        case 144: break;
        case 126: 
          { return KOVERRIDE;
          }
        case 145: break;
        case 86: 
          { return( KCAST );
          }
        case 146: break;
        case 135: 
          { return KPROTECTED;
          }
        case 147: break;
        case 58: 
          { return OCOND_OR;
          }
        case 148: break;
        case 93: 
          { return KTHROW ;
          }
        case 149: break;
        case 83: 
          { return KTRUE ;
          }
        case 150: break;
        case 3: 
          { return ID;
          }
        case 151: break;
        case 121: 
          { return KGETTER;
          }
        case 152: break;
        case 57: 
          { return OBIT_OR_ASSIGN;
          }
        case 153: break;
        case 40: 
          { return OQUOTIENT_ASSIGN;
          }
        case 154: break;
        case 62: 
          { return OSHIFT_LEFT;
          }
        case 155: break;
        case 102: 
          { return KIMPORT ;
          }
        case 156: break;
        case 79: 
          { return KNULL ;
          }
        case 157: break;
        case 112: 
          { return( KEXTENDS );
          }
        case 158: break;
        case 80: 
          { return( KENUM );
          }
        case 159: break;
        case 16: 
          { return PRBRACK;
          }
        case 160: break;
        case 51: 
          { return OARROW;
          }
        case 161: break;
        case 1: 
          { yybegin(YYINITIAL); return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 162: break;
        case 15: 
          { return PLBRACK;
          }
        case 163: break;
        case 94: 
          { return KCATCH;
          }
        case 164: break;
        case 66: 
          { pushState(LONG_TEMPLATE_ENTRY); return LONG_TEMPLATE_ENTRY_START;
          }
        case 165: break;
        case 103: 
          { return KINLINE;
          }
        case 166: break;
        case 131: 
          { return KCOREAPI;
          }
        case 167: break;
        case 118: 
          { return( KPACKAGE );
          }
        case 168: break;
        case 107: 
          { return KSTATIC;
          }
        case 169: break;
        case 84: 
          { return KTHIS ;
          }
        case 170: break;
        case 49: 
          { return( KTO );
          }
        case 171: break;
        case 133: 
          { return( KIMPLEMENTS );
          }
        case 172: break;
        case 100: 
          { return KHACK;
          }
        case 173: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 174: break;
        case 37: 
          { return MACRO_ID;
          }
        case 175: break;
        case 129: 
          { return( KINTERFACE );
          }
        case 176: break;
        case 45: 
          { return OPLUS_ASSIGN;
          }
        case 177: break;
        case 70: 
          { return REG_EXP;
          }
        case 178: break;
        case 29: 
          { return OBIT_XOR;
          }
        case 179: break;
        case 44: 
          { return OPLUS_PLUS;
          }
        case 180: break;
        case 127: 
          { return KNODEBUG;
          }
        case 181: break;
        case 101: 
          { return KEXTERN;
          }
        case 182: break;
        case 64: 
          { return OREMAINDER_ASSIGN;
          }
        case 183: break;
        case 91: 
          { return KFALSE ;
          }
        case 184: break;
        case 109: 
          { return KBUILD;
          }
        case 185: break;
        case 42: 
          { return LITOCT;
          }
        case 186: break;
        case 4: 
          { return OCOLON;
          }
        case 187: break;
        case 77: 
          { return OSHIFT_LEFT_ASSIGN;
          }
        case 188: break;
        case 61: 
          { return OLESS_OR_EQUAL;
          }
        case 189: break;
        case 75: 
          { return KVAR;
          }
        case 190: break;
        case 38: 
          { return MSL_COMMENT;
          }
        case 191: break;
        case 98: 
          { return KBIND;
          }
        case 192: break;
        case 7: 
          { return CONDITIONAL_STATEMENT_ID;
          }
        case 193: break;
        case 10: 
          { return ODOT;
          }
        case 194: break;
        case 52: 
          { return OMINUS_ASSIGN;
          }
        case 195: break;
        case 123: 
          { return( KABSTRACT );
          }
        case 196: break;
        case 111: 
          { return KFINAL;
          }
        case 197: break;
        case 28: 
          { return OLESS;
          }
        case 198: break;
        case 69: 
          { return LITHEX;
          }
        case 199: break;
        case 67: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { return LITFLOAT;
          }
        case 200: break;
        case 104: 
          { return KRETURN ;
          }
        case 201: break;
        case 18: 
          { return PRPAREN;
          }
        case 202: break;
        case 72: 
          { return ONEW;
          }
        case 203: break;
        case 36: 
          { if (lBraceCount == 0) {
                                                popState();
                                                return LONG_TEMPLATE_ENTRY_END;
                                              }
                                              lBraceCount--;
                                              return PRCURLY;
          }
        case 204: break;
        case 50: 
          { return OMINUS_MINUS;
          }
        case 205: break;
        case 17: 
          { return PLPAREN;
          }
        case 206: break;
        case 134: 
          { return KAUTOBUILD;
          }
        case 207: break;
        case 105: 
          { return KPUBLIC;
          }
        case 208: break;
        case 34: 
          { popState(); return ID;
          }
        case 209: break;
        case 97: 
          { return KMETA;
          }
        case 210: break;
        case 73: 
          { return KFOR ;
          }
        case 211: break;
        case 26: 
          { return OBIT_OR;
          }
        case 212: break;
        case 119: 
          { return KNATIVE;
          }
        case 213: break;
        case 114: 
          { return KDYNAMIC;
          }
        case 214: break;
        case 113: 
          { return( KDEFAULT );
          }
        case 215: break;
        case 22: 
          { return OGREATER;
          }
        case 216: break;
        case 88: 
          { return KNEVER;
          }
        case 217: break;
        case 20: 
          { return OCOMMA;
          }
        case 218: break;
        case 124: 
          { return( KFUNCTION );
          }
        case 219: break;
        case 96: 
          { return KSUPER ;
          }
        case 220: break;
        case 33: 
          { popState(); return CLOSING_QUOTE;
          }
        case 221: break;
        case 55: 
          { return OEQ;
          }
        case 222: break;
        case 48: 
          { return KDO ;
          }
        case 223: break;
        case 132: 
          { return KOVERLOAD;
          }
        case 224: break;
        case 128: 
          { return KREQUIRE;
          }
        case 225: break;
        case 117: 
          { return KPRIVATE;
          }
        case 226: break;
        case 76: 
          { return OSHIFT_RIGHT_ASSIGN;
          }
        case 227: break;
        case 24: 
          { return ONOT;
          }
        case 228: break;
        case 74: 
          { return KTRY;
          }
        case 229: break;
        case 14: 
          { return PRCURLY;
          }
        case 230: break;
        case 31: 
          { return REGULAR_STRING_PART;
          }
        case 231: break;
        case 87: 
          { popState(); return KTHIS;
          }
        case 232: break;
        case 85: 
          { return( KCASE );
          }
        case 233: break;
        case 13: 
          { return PLCURLY;
          }
        case 234: break;
        case 95: 
          { return( KCLASS );
          }
        case 235: break;
        case 108: 
          { return KMACRO;
          }
        case 236: break;
        case 110: 
          { return KDEBUG;
          }
        case 237: break;
        case 23: 
          { return OASSIGN;
          }
        case 238: break;
        case 53: 
          { return OGREATER_OR_EQUAL;
          }
        case 239: break;
        case 6: 
          { return OMUL;
          }
        case 240: break;
        case 60: 
          { return OCOND_AND;
          }
        case 241: break;
        case 92: 
          { return KUSING ;
          }
        case 242: break;
        case 56: 
          { return ONOT_EQ;
          }
        case 243: break;
        case 11: 
          { pushState(QUO_STRING); return OPEN_QUOTE;
          }
        case 244: break;
        case 130: 
          { return KFAKEENUM;
          }
        case 245: break;
        case 89: 
          { return KWHILE ;
          }
        case 246: break;
        case 59: 
          { return OBIT_AND_ASSIGN;
          }
        case 247: break;
        case 9: 
          { return OPLUS;
          }
        case 248: break;
        case 35: 
          { lBraceCount++; return PLCURLY;
          }
        case 249: break;
        case 81: 
          { return KELSE ;
          }
        case 250: break;
        case 32: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 251: break;
        case 8: 
          { return LITINT;
          }
        case 252: break;
        case 68: 
          { return DOC_COMMENT;
          }
        case 253: break;
        case 125: 
          { return KCONTINUE ;
          }
        case 254: break;
        case 78: 
          { return KNS;
          }
        case 255: break;
        case 82: 
          { return( KFROM);
          }
        case 256: break;
        case 120: 
          { return KBITMAP;
          }
        case 257: break;
        case 115: 
          { return KUNTYPED;
          }
        case 258: break;
        case 54: 
          { return OFAT_ARROW;
          }
        case 259: break;
        case 99: 
          { return KKEEP;
          }
        case 260: break;
        case 90: 
          { return( KBREAK );
          }
        case 261: break;
        case 19: 
          { return OSEMI;
          }
        case 262: break;
        case 30: 
          { return OREMAINDER;
          }
        case 263: break;
        case 41: 
          { return OMUL_ASSIGN;
          }
        case 264: break;
        case 46: 
          { return OIN;
          }
        case 265: break;
        case 12: 
          { pushState(APOS_STRING); return OPEN_QUOTE;
          }
        case 266: break;
        case 116: 
          { return KTYPEDEF;
          }
        case 267: break;
        case 63: 
          { return OBIT_XOR_ASSIGN;
          }
        case 268: break;
        case 65: 
          { pushState(SHORT_TEMPLATE_ENTRY);
                                                                  yypushback(yylength() - 1);
                                                                  return SHORT_TEMPLATE_ENTRY_START;
          }
        case 269: break;
        case 71: 
          { return OTRIPLE_DOT;
          }
        case 270: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
