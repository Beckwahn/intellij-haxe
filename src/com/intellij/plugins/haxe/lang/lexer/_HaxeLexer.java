/* The following code was generated by JFlex 1.4.3 on 6/18/14 2:21 PM */

package com.intellij.plugins.haxe.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/18/14 2:21 PM from the specification file
 * <tt>/Users/eliasku/Work/intellij-haxe/src/com/intellij/plugins/haxe/lang/lexer/haxe.flex</tt>
 */
public class _HaxeLexer implements FlexLexer, HaxeTokenTypes, HaxeTokenTypeSets {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int APOS_STRING = 4;
  public static final int YYINITIAL = 0;
  public static final int LONG_TEMPLATE_ENTRY = 8;
  public static final int QUO_STRING = 2;
  public static final int SHORT_TEMPLATE_ENTRY = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\103\1\0\1\1\1\6\22\0\1\1\1\73\1\27"+
    "\1\102\1\7\1\101\1\76\1\30\1\64\1\65\1\13\1\25\1\67"+
    "\1\70\1\26\1\12\1\17\7\16\2\15\1\11\1\66\1\77\1\72"+
    "\1\71\1\74\1\10\1\14\1\60\2\14\1\24\1\14\21\2\1\21"+
    "\2\2\1\62\1\5\1\63\1\100\1\3\1\0\1\41\1\37\1\51"+
    "\1\43\1\34\1\44\1\52\1\55\1\36\1\2\1\42\1\46\1\23"+
    "\1\33\1\53\1\50\1\61\1\40\1\54\1\47\1\45\1\56\1\35"+
    "\1\20\1\57\1\2\1\31\1\75\1\32\1\22\53\0\1\2\12\0"+
    "\1\2\4\0\1\2\5\0\27\2\1\0\37\2\1\0\u013f\2\31\0"+
    "\162\2\4\0\14\2\16\0\5\2\11\0\1\2\213\0\1\2\13\0"+
    "\1\2\1\0\3\2\1\0\1\2\1\0\24\2\1\0\54\2\1\0"+
    "\46\2\1\0\5\2\4\0\202\2\10\0\105\2\1\0\46\2\2\0"+
    "\2\2\6\0\20\2\41\0\46\2\2\0\1\2\7\0\47\2\110\0"+
    "\33\2\5\0\3\2\56\0\32\2\5\0\13\2\25\0\12\4\4\0"+
    "\2\2\1\0\143\2\1\0\1\2\17\0\2\2\7\0\2\2\12\4"+
    "\3\2\2\0\1\2\20\0\1\2\1\0\36\2\35\0\3\2\60\0"+
    "\46\2\13\0\1\2\u0152\0\66\2\3\0\1\2\22\0\1\2\7\0"+
    "\12\2\4\0\12\4\25\0\10\2\2\0\2\2\2\0\26\2\1\0"+
    "\7\2\1\0\1\2\3\0\4\2\3\0\1\2\36\0\2\2\1\0"+
    "\3\2\4\0\12\4\2\2\23\0\6\2\4\0\2\2\2\0\26\2"+
    "\1\0\7\2\1\0\2\2\1\0\2\2\1\0\2\2\37\0\4\2"+
    "\1\0\1\2\7\0\12\4\2\0\3\2\20\0\11\2\1\0\3\2"+
    "\1\0\26\2\1\0\7\2\1\0\2\2\1\0\5\2\3\0\1\2"+
    "\22\0\1\2\17\0\2\2\4\0\12\4\25\0\10\2\2\0\2\2"+
    "\2\0\26\2\1\0\7\2\1\0\2\2\1\0\5\2\3\0\1\2"+
    "\36\0\2\2\1\0\3\2\4\0\12\4\1\0\1\2\21\0\1\2"+
    "\1\0\6\2\3\0\3\2\1\0\4\2\3\0\2\2\1\0\1\2"+
    "\1\0\2\2\3\0\2\2\3\0\3\2\3\0\10\2\1\0\3\2"+
    "\55\0\11\4\25\0\10\2\1\0\3\2\1\0\27\2\1\0\12\2"+
    "\1\0\5\2\46\0\2\2\4\0\12\4\25\0\10\2\1\0\3\2"+
    "\1\0\27\2\1\0\12\2\1\0\5\2\3\0\1\2\40\0\1\2"+
    "\1\0\2\2\4\0\12\4\25\0\10\2\1\0\3\2\1\0\27\2"+
    "\1\0\20\2\46\0\2\2\4\0\12\4\25\0\22\2\3\0\30\2"+
    "\1\0\11\2\1\0\1\2\2\0\7\2\72\0\60\2\1\0\2\2"+
    "\14\0\7\2\11\0\12\4\47\0\2\2\1\0\1\2\2\0\2\2"+
    "\1\0\1\2\2\0\1\2\6\0\4\2\1\0\7\2\1\0\3\2"+
    "\1\0\1\2\1\0\1\2\2\0\2\2\1\0\4\2\1\0\2\2"+
    "\11\0\1\2\2\0\5\2\1\0\1\2\11\0\12\4\2\0\2\2"+
    "\42\0\1\2\37\0\12\4\26\0\10\2\1\0\42\2\35\0\4\2"+
    "\164\0\42\2\1\0\5\2\1\0\2\2\25\0\12\4\6\0\6\2"+
    "\112\0\46\2\12\0\51\2\7\0\132\2\5\0\104\2\5\0\122\2"+
    "\6\0\7\2\1\0\77\2\1\0\1\2\1\0\4\2\2\0\7\2"+
    "\1\0\1\2\1\0\4\2\2\0\47\2\1\0\1\2\1\0\4\2"+
    "\2\0\37\2\1\0\1\2\1\0\4\2\2\0\7\2\1\0\1\2"+
    "\1\0\4\2\2\0\7\2\1\0\7\2\1\0\27\2\1\0\37\2"+
    "\1\0\1\2\1\0\4\2\2\0\7\2\1\0\47\2\1\0\23\2"+
    "\16\0\11\4\56\0\125\2\14\0\u026c\2\2\0\10\2\12\0\32\2"+
    "\5\0\113\2\25\0\15\2\1\0\4\2\16\0\22\2\16\0\22\2"+
    "\16\0\15\2\1\0\3\2\17\0\64\2\43\0\1\2\4\0\1\2"+
    "\3\0\12\4\46\0\12\4\6\0\130\2\10\0\51\2\127\0\35\2"+
    "\51\0\12\4\36\2\2\0\5\2\u038b\0\154\2\224\0\234\2\4\0"+
    "\132\2\6\0\26\2\2\0\6\2\2\0\46\2\2\0\6\2\2\0"+
    "\10\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0\37\2\2\0"+
    "\65\2\1\0\7\2\1\0\1\2\3\0\3\2\1\0\7\2\3\0"+
    "\4\2\2\0\6\2\4\0\15\2\5\0\3\2\1\0\7\2\164\0"+
    "\1\2\15\0\1\2\202\0\1\2\4\0\1\2\2\0\12\2\1\0"+
    "\1\2\3\0\5\2\6\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\4\2\1\0\3\2\1\0\7\2\3\0\3\2\5\0\5\2\u0ebb\0"+
    "\2\2\52\0\5\2\5\0\2\2\4\0\126\2\6\0\3\2\1\0"+
    "\132\2\1\0\4\2\5\0\50\2\4\0\136\2\21\0\30\2\70\0"+
    "\20\2\u0200\0\u19b6\2\112\0\u51a6\2\132\0\u048d\2\u0773\0\u2ba4\2\u215c\0"+
    "\u012e\2\2\0\73\2\225\0\7\2\14\0\5\2\5\0\1\2\1\0"+
    "\12\2\1\0\15\2\1\0\5\2\1\0\1\2\1\0\2\2\1\0"+
    "\2\2\1\0\154\2\41\0\u016b\2\22\0\100\2\2\0\66\2\50\0"+
    "\14\2\164\0\5\2\1\0\207\2\23\0\12\4\7\0\32\2\6\0"+
    "\32\2\13\0\131\2\3\0\6\2\2\0\6\2\2\0\6\2\2\0"+
    "\3\2\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\2\1\1\4\1\5\1\6"+
    "\2\7\1\1\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\21\3\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\1\1\36\1\37\1\36\1\40\1\36\1\37"+
    "\2\41\3\37\1\42\1\43\1\37\3\0\1\44\1\0"+
    "\1\45\1\46\1\47\1\50\1\51\1\0\1\52\1\0"+
    "\1\53\1\54\1\0\7\3\1\55\1\56\4\3\1\57"+
    "\10\3\1\60\17\3\1\61\1\62\1\63\1\0\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\2\0\1\36\1\77\1\100\1\41\2\0"+
    "\3\101\16\44\1\46\1\102\1\103\1\0\1\104\1\105"+
    "\1\106\21\3\1\107\3\3\1\110\12\3\1\111\1\3"+
    "\1\112\3\3\1\113\1\114\1\115\3\0\1\116\1\41"+
    "\1\101\4\44\1\117\16\44\1\0\2\102\1\104\1\3"+
    "\1\120\1\3\1\121\1\122\12\3\1\123\4\3\1\124"+
    "\1\125\6\3\1\126\1\127\6\3\1\130\2\0\1\131"+
    "\23\44\1\46\1\0\1\132\2\3\1\133\4\3\1\134"+
    "\4\3\1\135\2\3\1\136\1\137\4\3\1\140\1\141"+
    "\3\3\1\142\1\3\1\0\1\143\1\144\3\44\1\145"+
    "\4\44\1\146\10\44\1\147\1\3\1\150\1\3\1\151"+
    "\1\152\1\3\1\153\10\3\1\154\2\3\1\155\1\156"+
    "\1\157\1\0\1\160\3\44\1\161\2\44\1\162\1\163"+
    "\6\44\1\164\3\3\1\165\1\166\1\3\1\167\1\170"+
    "\1\171\1\172\2\3\1\173\1\174\1\44\1\175\5\44"+
    "\1\176\1\44\1\177\2\3\1\200\1\201\1\202\1\203"+
    "\1\204\1\205\5\44\1\3\1\206\1\44\1\207\1\44"+
    "\1\210\1\211\1\212\1\213\1\214";

  private static int [] zzUnpackAction() {
    int [] result = new int[437];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u0154\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8"+
    "\0\u03fc\0\u0440\0\u0154\0\u0154\0\u0154\0\u0154\0\u0484\0\u04c8"+
    "\0\u050c\0\u0550\0\u0594\0\u05d8\0\u061c\0\u0660\0\u06a4\0\u06e8"+
    "\0\u072c\0\u0770\0\u07b4\0\u07f8\0\u083c\0\u0880\0\u08c4\0\u0154"+
    "\0\u0154\0\u0154\0\u0154\0\u0154\0\u0154\0\u0908\0\u094c\0\u0990"+
    "\0\u09d4\0\u0154\0\u0a18\0\u0a5c\0\u0aa0\0\u0ae4\0\u0b28\0\u0b6c"+
    "\0\u0bb0\0\u0bf4\0\u0c38\0\u0154\0\u0c7c\0\u0154\0\u0cc0\0\u0d04"+
    "\0\u0220\0\u0264\0\u03b8\0\u0154\0\u0154\0\u0b6c\0\u0220\0\u0d48"+
    "\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c\0\u0154\0\u0154\0\u0ee0"+
    "\0\u0f24\0\u0154\0\u0f68\0\u0154\0\u0154\0\u0fac\0\u0ff0\0\u1034"+
    "\0\u1078\0\u10bc\0\u1100\0\u1144\0\u1188\0\u11cc\0\u01dc\0\u1210"+
    "\0\u1254\0\u1298\0\u12dc\0\u01dc\0\u1320\0\u1364\0\u13a8\0\u13ec"+
    "\0\u1430\0\u1474\0\u14b8\0\u14fc\0\u01dc\0\u1540\0\u1584\0\u15c8"+
    "\0\u160c\0\u1650\0\u1694\0\u16d8\0\u171c\0\u1760\0\u17a4\0\u17e8"+
    "\0\u182c\0\u1870\0\u18b4\0\u18f8\0\u0154\0\u0154\0\u0154\0\u193c"+
    "\0\u0154\0\u0154\0\u0154\0\u0154\0\u0154\0\u0154\0\u0154\0\u0154"+
    "\0\u1980\0\u0154\0\u0154\0\u19c4\0\u1a08\0\u0154\0\u1a4c\0\u0154"+
    "\0\u1a90\0\u1ad4\0\u1b18\0\u0154\0\u0d8c\0\u0d48\0\u1b5c\0\u1ba0"+
    "\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0"+
    "\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58\0\u0f24\0\u1f9c"+
    "\0\u1fe0\0\u0154\0\u01dc\0\u2024\0\u2068\0\u20ac\0\u20f0\0\u2134"+
    "\0\u2178\0\u21bc\0\u2200\0\u2244\0\u2288\0\u22cc\0\u2310\0\u2354"+
    "\0\u2398\0\u23dc\0\u2420\0\u2464\0\u01dc\0\u24a8\0\u24ec\0\u2530"+
    "\0\u01dc\0\u2574\0\u25b8\0\u25fc\0\u2640\0\u2684\0\u26c8\0\u270c"+
    "\0\u2750\0\u2794\0\u27d8\0\u01dc\0\u281c\0\u01dc\0\u2860\0\u28a4"+
    "\0\u28e8\0\u01dc\0\u0154\0\u0154\0\u292c\0\u2970\0\u29b4\0\u0154"+
    "\0\u29f8\0\u1ad4\0\u2a3c\0\u2a80\0\u2ac4\0\u2b08\0\u0dd0\0\u2b4c"+
    "\0\u2b90\0\u2bd4\0\u2c18\0\u2c5c\0\u2ca0\0\u2ce4\0\u2d28\0\u2d6c"+
    "\0\u2db0\0\u2df4\0\u2e38\0\u2e7c\0\u2ec0\0\u2f04\0\u2f48\0\u0154"+
    "\0\u2f8c\0\u2fd0\0\u01dc\0\u3014\0\u01dc\0\u01dc\0\u3058\0\u309c"+
    "\0\u30e0\0\u3124\0\u3168\0\u31ac\0\u31f0\0\u3234\0\u3278\0\u32bc"+
    "\0\u01dc\0\u3300\0\u3344\0\u3388\0\u33cc\0\u01dc\0\u01dc\0\u3410"+
    "\0\u3454\0\u3498\0\u34dc\0\u3520\0\u3564\0\u01dc\0\u01dc\0\u35a8"+
    "\0\u35ec\0\u3630\0\u3674\0\u36b8\0\u36fc\0\u0154\0\u3740\0\u3784"+
    "\0\u0cc0\0\u37c8\0\u380c\0\u3850\0\u3894\0\u38d8\0\u391c\0\u3960"+
    "\0\u39a4\0\u39e8\0\u3a2c\0\u3a70\0\u3ab4\0\u3af8\0\u3b3c\0\u3b80"+
    "\0\u3bc4\0\u3c08\0\u3c4c\0\u3c90\0\u0154\0\u3cd4\0\u01dc\0\u3d18"+
    "\0\u3d5c\0\u01dc\0\u3da0\0\u3de4\0\u3e28\0\u3e6c\0\u01dc\0\u3eb0"+
    "\0\u3ef4\0\u3f38\0\u3f7c\0\u01dc\0\u3fc0\0\u4004\0\u01dc\0\u01dc"+
    "\0\u4048\0\u408c\0\u40d0\0\u4114\0\u01dc\0\u01dc\0\u4158\0\u419c"+
    "\0\u41e0\0\u01dc\0\u4224\0\u4268\0\u42ac\0\u0dd0\0\u42f0\0\u4334"+
    "\0\u4378\0\u0dd0\0\u43bc\0\u4400\0\u4444\0\u4488\0\u0dd0\0\u44cc"+
    "\0\u4510\0\u4554\0\u4598\0\u45dc\0\u4620\0\u4664\0\u46a8\0\u0dd0"+
    "\0\u46ec\0\u01dc\0\u4730\0\u01dc\0\u01dc\0\u4774\0\u01dc\0\u47b8"+
    "\0\u47fc\0\u4840\0\u4884\0\u48c8\0\u490c\0\u4950\0\u4994\0\u01dc"+
    "\0\u49d8\0\u4a1c\0\u01dc\0\u01dc\0\u0154\0\u4a60\0\u0dd0\0\u4aa4"+
    "\0\u4ae8\0\u4b2c\0\u0dd0\0\u4b70\0\u4bb4\0\u0dd0\0\u0dd0\0\u4bf8"+
    "\0\u4c3c\0\u4c80\0\u4cc4\0\u4d08\0\u4d4c\0\u01dc\0\u4d90\0\u4dd4"+
    "\0\u4e18\0\u01dc\0\u01dc\0\u4e5c\0\u01dc\0\u01dc\0\u01dc\0\u01dc"+
    "\0\u4ea0\0\u4ee4\0\u0154\0\u0dd0\0\u4f28\0\u0dd0\0\u4f6c\0\u4fb0"+
    "\0\u4ff4\0\u5038\0\u507c\0\u0dd0\0\u50c0\0\u0dd0\0\u5104\0\u5148"+
    "\0\u01dc\0\u01dc\0\u01dc\0\u01dc\0\u0dd0\0\u0dd0\0\u518c\0\u51d0"+
    "\0\u5214\0\u5258\0\u529c\0\u52e0\0\u01dc\0\u5324\0\u0dd0\0\u5368"+
    "\0\u0dd0\0\u0dd0\0\u01dc\0\u0dd0\0\u0dd0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[437];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\2\10\1\11\1\6\1\7\1\10\1\12"+
    "\1\13\1\14\1\15\1\10\2\16\1\17\2\10\1\20"+
    "\2\10\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\10\1\36"+
    "\1\37\1\40\1\10\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\10\1\47\3\10\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\7\5\71\1\72"+
    "\1\71\1\73\17\71\1\74\54\71\5\75\1\72\1\75"+
    "\1\73\20\75\1\74\53\75\2\76\2\77\10\76\1\77"+
    "\3\76\2\77\1\76\2\77\6\76\14\77\1\100\12\77"+
    "\21\76\1\0\1\76\1\7\2\10\1\101\1\76\1\7"+
    "\1\10\1\102\1\13\1\14\1\15\1\10\2\16\1\17"+
    "\2\10\1\103\2\10\1\21\1\22\1\23\1\24\1\104"+
    "\1\105\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\10\1\36\1\37\1\40\1\10\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\10\1\47\3\10\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\106\1\7"+
    "\105\0\1\7\4\0\1\7\74\0\1\7\2\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\27\10"+
    "\26\0\1\107\10\0\3\107\4\0\1\110\1\0\1\111"+
    "\5\0\1\110\51\0\2\112\3\0\1\112\1\0\1\113"+
    "\2\0\1\112\3\0\2\112\1\0\2\112\6\0\27\112"+
    "\34\0\1\114\1\115\56\0\1\116\103\0\1\117\15\0"+
    "\1\107\10\0\3\16\4\0\1\110\1\0\1\111\5\0"+
    "\1\110\53\0\1\107\10\0\1\107\2\120\2\121\2\0"+
    "\1\110\1\0\1\111\5\0\1\110\47\0\12\122\1\123"+
    "\71\122\25\0\1\124\44\0\1\125\15\0\1\111\10\0"+
    "\3\111\6\0\1\126\57\0\3\10\2\0\1\10\4\0"+
    "\6\10\1\0\2\10\6\0\1\10\1\127\10\10\1\130"+
    "\14\10\24\0\3\10\2\0\1\10\4\0\4\10\1\131"+
    "\1\10\1\0\2\10\6\0\1\132\12\10\1\133\13\10"+
    "\24\0\3\10\2\0\1\10\4\0\6\10\1\0\2\10"+
    "\6\0\22\10\1\134\4\10\24\0\3\10\2\0\1\10"+
    "\4\0\6\10\1\0\1\135\1\10\6\0\1\136\10\10"+
    "\1\137\15\10\24\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\5\10\1\140\21\10\24\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\1\10"+
    "\1\141\25\10\24\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\4\10\1\142\22\10\24\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\1\10"+
    "\1\143\16\10\1\144\3\10\1\145\2\10\24\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\5\10"+
    "\1\146\1\147\3\10\1\150\5\10\1\151\6\10\24\0"+
    "\3\10\2\0\1\10\4\0\6\10\1\0\2\10\6\0"+
    "\1\152\20\10\1\153\5\10\24\0\3\10\2\0\1\10"+
    "\4\0\6\10\1\0\2\10\6\0\5\10\1\154\12\10"+
    "\1\155\1\10\1\156\1\10\1\157\2\10\24\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\5\10"+
    "\1\160\1\161\3\10\1\162\14\10\24\0\3\10\2\0"+
    "\1\10\4\0\6\10\1\0\2\10\6\0\6\10\1\163"+
    "\4\10\1\164\4\10\1\165\6\10\24\0\3\10\2\0"+
    "\1\10\4\0\6\10\1\0\2\10\6\0\1\10\1\166"+
    "\25\10\24\0\3\10\2\0\1\10\4\0\6\10\1\0"+
    "\2\10\6\0\23\10\1\167\3\10\24\0\3\10\2\0"+
    "\1\10\4\0\6\10\1\0\2\10\6\0\1\10\1\170"+
    "\1\171\7\10\1\172\1\10\1\173\12\10\24\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\6\10"+
    "\1\174\20\10\112\0\1\175\1\176\1\177\102\0\1\200"+
    "\1\201\103\0\1\202\103\0\1\203\103\0\1\204\2\0"+
    "\1\205\100\0\1\206\3\0\1\207\77\0\1\210\4\0"+
    "\1\211\76\0\1\212\103\0\1\213\45\0\1\214\1\0"+
    "\1\215\45\0\5\71\1\0\1\71\1\0\17\71\1\0"+
    "\54\71\6\216\1\0\74\216\3\0\2\217\10\0\1\217"+
    "\3\0\2\217\1\0\2\217\4\0\1\220\1\0\27\217"+
    "\22\0\5\75\1\0\1\75\1\0\20\75\1\0\53\75"+
    "\2\0\3\77\7\0\6\77\1\0\2\77\6\0\27\77"+
    "\24\0\3\77\7\0\6\77\1\0\2\77\6\0\22\77"+
    "\1\221\4\77\26\0\1\222\10\0\3\222\5\0\1\223"+
    "\42\0\1\223\13\0\4\224\1\225\10\224\3\225\4\224"+
    "\1\226\1\224\1\0\5\224\1\226\47\224\2\0\3\112"+
    "\2\0\1\112\4\0\6\112\1\0\2\112\6\0\27\112"+
    "\24\0\2\112\3\0\1\112\4\0\1\112\3\0\2\112"+
    "\1\0\1\227\1\112\6\0\1\230\3\112\1\231\1\232"+
    "\1\233\1\234\1\235\1\236\3\112\1\237\1\240\1\241"+
    "\1\242\1\243\1\244\4\112\22\0\6\114\1\0\74\114"+
    "\1\0\13\245\1\246\70\245\4\0\1\107\10\0\1\107"+
    "\2\120\4\0\1\110\1\0\1\111\5\0\1\110\63\0"+
    "\4\247\4\0\1\247\7\0\1\247\2\0\1\247\1\0"+
    "\1\247\1\0\2\247\4\0\1\247\6\0\1\247\23\0"+
    "\5\123\1\250\4\123\1\251\71\123\26\0\1\252\57\0"+
    "\3\10\2\0\1\10\4\0\6\10\1\0\2\10\6\0"+
    "\2\10\1\253\20\10\1\254\3\10\24\0\3\10\2\0"+
    "\1\10\4\0\6\10\1\0\2\10\6\0\13\10\1\255"+
    "\13\10\24\0\3\10\2\0\1\10\4\0\6\10\1\0"+
    "\2\10\6\0\14\10\1\256\12\10\24\0\3\10\2\0"+
    "\1\10\4\0\6\10\1\0\2\10\6\0\12\10\1\257"+
    "\14\10\24\0\3\10\2\0\1\10\4\0\6\10\1\0"+
    "\2\10\6\0\21\10\1\260\5\10\24\0\3\10\2\0"+
    "\1\10\4\0\6\10\1\0\2\10\6\0\3\10\1\261"+
    "\23\10\24\0\3\10\2\0\1\10\4\0\6\10\1\0"+
    "\2\10\6\0\15\10\1\262\11\10\24\0\3\10\2\0"+
    "\1\10\4\0\6\10\1\0\2\10\6\0\13\10\1\263"+
    "\1\264\12\10\24\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\1\10\1\265\25\10\24\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\14\10"+
    "\1\266\12\10\24\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\21\10\1\267\5\10\24\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\11\10"+
    "\1\270\15\10\24\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\1\271\26\10\24\0\3\10\2\0"+
    "\1\10\4\0\6\10\1\0\2\10\6\0\20\10\1\272"+
    "\6\10\24\0\3\10\2\0\1\10\4\0\6\10\1\0"+
    "\2\10\6\0\13\10\1\273\13\10\24\0\3\10\2\0"+
    "\1\10\4\0\6\10\1\0\2\10\6\0\1\274\26\10"+
    "\24\0\3\10\2\0\1\10\4\0\6\10\1\0\2\10"+
    "\6\0\5\10\1\275\21\10\24\0\3\10\2\0\1\10"+
    "\4\0\6\10\1\0\2\10\6\0\14\10\1\276\12\10"+
    "\24\0\3\10\2\0\1\10\4\0\6\10\1\0\2\10"+
    "\6\0\3\10\1\277\23\10\24\0\3\10\2\0\1\10"+
    "\4\0\6\10\1\0\2\10\6\0\12\10\1\300\11\10"+
    "\1\301\2\10\24\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\3\10\1\302\1\10\1\303\21\10"+
    "\24\0\3\10\2\0\1\10\4\0\6\10\1\0\2\10"+
    "\6\0\15\10\1\304\11\10\24\0\3\10\2\0\1\10"+
    "\4\0\6\10\1\0\2\10\6\0\3\10\1\305\23\10"+
    "\24\0\3\10\2\0\1\10\4\0\6\10\1\0\2\10"+
    "\6\0\16\10\1\306\10\10\24\0\3\10\2\0\1\10"+
    "\4\0\6\10\1\0\2\10\6\0\4\10\1\307\22\10"+
    "\24\0\3\10\2\0\1\10\4\0\6\10\1\0\2\10"+
    "\6\0\14\10\1\310\4\10\1\311\5\10\24\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\6\10"+
    "\1\312\20\10\24\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\1\313\26\10\24\0\3\10\2\0"+
    "\1\10\4\0\6\10\1\0\2\10\6\0\14\10\1\314"+
    "\12\10\24\0\3\10\2\0\1\10\4\0\6\10\1\0"+
    "\2\10\6\0\1\10\1\315\25\10\24\0\3\10\2\0"+
    "\1\10\4\0\6\10\1\0\2\10\6\0\14\10\1\316"+
    "\12\10\24\0\3\10\2\0\1\10\4\0\6\10\1\0"+
    "\2\10\6\0\3\10\1\317\23\10\24\0\3\10\2\0"+
    "\1\10\4\0\6\10\1\0\2\10\6\0\15\10\1\320"+
    "\11\10\24\0\3\10\2\0\1\10\4\0\6\10\1\0"+
    "\2\10\6\0\6\10\1\321\20\10\24\0\3\10\2\0"+
    "\1\10\4\0\6\10\1\0\2\10\6\0\5\10\1\322"+
    "\21\10\114\0\1\323\103\0\1\324\44\0\1\325\4\0"+
    "\1\326\5\0\1\327\101\0\1\330\41\0\3\217\7\0"+
    "\6\217\1\0\2\217\6\0\27\217\24\0\3\77\7\0"+
    "\6\77\1\0\2\77\6\0\3\77\1\331\23\77\22\0"+
    "\4\224\1\332\10\224\3\332\6\224\1\0\55\224\4\0"+
    "\1\222\10\0\3\222\66\0\3\112\2\0\1\112\4\0"+
    "\6\112\1\0\2\112\6\0\1\112\1\333\4\112\1\334"+
    "\20\112\24\0\3\112\2\0\1\112\4\0\6\112\1\0"+
    "\2\112\6\0\6\112\1\335\11\112\1\336\1\337\5\112"+
    "\24\0\3\112\2\0\1\112\4\0\6\112\1\0\2\112"+
    "\6\0\3\112\1\340\6\112\1\341\14\112\24\0\3\112"+
    "\2\0\1\112\4\0\6\112\1\0\2\112\6\0\1\112"+
    "\1\342\25\112\24\0\3\112\2\0\1\112\4\0\6\112"+
    "\1\0\2\112\6\0\12\112\1\343\14\112\24\0\3\112"+
    "\2\0\1\112\4\0\6\112\1\0\2\112\6\0\1\112"+
    "\1\344\25\112\24\0\3\112\2\0\1\112\4\0\6\112"+
    "\1\0\2\112\6\0\1\112\1\345\25\112\24\0\3\112"+
    "\2\0\1\112\4\0\6\112\1\0\2\112\6\0\3\112"+
    "\1\346\2\112\1\347\20\112\24\0\3\112\2\0\1\112"+
    "\4\0\6\112\1\0\2\112\6\0\5\112\1\350\21\112"+
    "\24\0\3\112\2\0\1\112\4\0\6\112\1\0\2\112"+
    "\6\0\20\112\1\351\6\112\24\0\3\112\2\0\1\112"+
    "\4\0\6\112\1\0\2\112\6\0\1\112\1\352\25\112"+
    "\24\0\3\112\2\0\1\112\4\0\6\112\1\0\2\112"+
    "\6\0\23\112\1\353\3\112\24\0\3\112\2\0\1\112"+
    "\4\0\6\112\1\0\2\112\6\0\1\112\1\354\25\112"+
    "\24\0\3\112\2\0\1\112\4\0\6\112\1\0\2\112"+
    "\6\0\6\112\1\355\20\112\22\0\13\245\1\356\70\245"+
    "\12\357\1\360\1\246\70\357\5\123\1\250\4\123\1\361"+
    "\71\123\23\0\1\251\12\0\1\251\6\0\1\251\4\0"+
    "\1\251\1\0\1\251\31\0\3\10\2\0\1\10\4\0"+
    "\6\10\1\0\2\10\6\0\1\10\1\362\25\10\24\0"+
    "\3\10\2\0\1\10\4\0\6\10\1\0\2\10\6\0"+
    "\13\10\1\363\13\10\24\0\3\10\2\0\1\10\4\0"+
    "\6\10\1\0\2\10\6\0\1\10\1\364\25\10\24\0"+
    "\3\10\2\0\1\10\4\0\6\10\1\0\1\365\1\10"+
    "\6\0\27\10\24\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\1\10\1\366\25\10\24\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\13\10"+
    "\1\367\13\10\24\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\13\10\1\370\4\10\1\371\6\10"+
    "\24\0\3\10\2\0\1\10\4\0\6\10\1\0\2\10"+
    "\6\0\3\10\1\372\23\10\24\0\3\10\2\0\1\10"+
    "\4\0\6\10\1\0\2\10\6\0\1\10\1\373\25\10"+
    "\24\0\3\10\2\0\1\10\4\0\6\10\1\0\2\10"+
    "\6\0\6\10\1\374\20\10\24\0\3\10\2\0\1\10"+
    "\4\0\6\10\1\0\2\10\6\0\12\10\1\375\14\10"+
    "\24\0\3\10\2\0\1\10\4\0\6\10\1\0\2\10"+
    "\6\0\14\10\1\376\12\10\24\0\3\10\2\0\1\10"+
    "\4\0\6\10\1\0\2\10\6\0\6\10\1\377\20\10"+
    "\24\0\3\10\2\0\1\10\4\0\6\10\1\0\2\10"+
    "\6\0\6\10\1\u0100\20\10\24\0\3\10\2\0\1\10"+
    "\4\0\6\10\1\0\1\u0101\1\10\6\0\27\10\24\0"+
    "\3\10\2\0\1\10\4\0\6\10\1\0\2\10\6\0"+
    "\21\10\1\u0102\5\10\24\0\3\10\2\0\1\10\4\0"+
    "\6\10\1\0\2\10\6\0\16\10\1\u0103\10\10\24\0"+
    "\3\10\2\0\1\10\4\0\6\10\1\0\2\10\6\0"+
    "\24\10\1\u0104\2\10\24\0\3\10\2\0\1\10\4\0"+
    "\6\10\1\0\2\10\6\0\1\u0105\26\10\24\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\1\10"+
    "\1\u0106\25\10\24\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\21\10\1\u0107\5\10\24\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\20\10"+
    "\1\u0108\6\10\24\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\1\10\1\u0109\25\10\24\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\23\10"+
    "\1\u010a\3\10\24\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\7\10\1\u010b\17\10\24\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\13\10"+
    "\1\u010c\13\10\24\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\16\10\1\u010d\10\10\24\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\1\10"+
    "\1\u010e\12\10\1\u010f\12\10\24\0\3\10\2\0\1\10"+
    "\4\0\6\10\1\0\2\10\6\0\21\10\1\u0110\5\10"+
    "\24\0\3\10\2\0\1\10\4\0\6\10\1\0\2\10"+
    "\6\0\14\10\1\u0111\12\10\24\0\3\10\2\0\1\10"+
    "\4\0\6\10\1\0\2\10\6\0\5\10\1\u0112\21\10"+
    "\24\0\3\10\2\0\1\10\4\0\6\10\1\0\2\10"+
    "\6\0\14\10\1\u0113\12\10\24\0\3\10\2\0\1\10"+
    "\4\0\6\10\1\0\2\10\6\0\1\10\1\u0114\25\10"+
    "\24\0\3\10\2\0\1\10\4\0\6\10\1\0\2\10"+
    "\6\0\14\10\1\u0115\12\10\65\0\1\u0116\100\0\1\u0117"+
    "\117\0\1\u0118\31\0\3\77\7\0\6\77\1\0\2\77"+
    "\6\0\21\77\1\u0119\5\77\24\0\3\112\2\0\1\112"+
    "\4\0\6\112\1\0\2\112\6\0\14\112\1\u011a\12\112"+
    "\24\0\3\112\2\0\1\112\4\0\6\112\1\0\2\112"+
    "\6\0\16\112\1\u011b\10\112\24\0\3\112\2\0\1\112"+
    "\4\0\6\112\1\0\2\112\6\0\14\112\1\u011c\12\112"+
    "\24\0\3\112\2\0\1\112\4\0\6\112\1\0\2\112"+
    "\6\0\10\112\1\u011d\16\112\24\0\3\112\2\0\1\112"+
    "\4\0\6\112\1\0\2\112\6\0\1\u011e\13\112\1\u011f"+
    "\12\112\24\0\3\112\2\0\1\112\4\0\6\112\1\0"+
    "\2\112\6\0\3\112\1\u0120\23\112\24\0\3\112\2\0"+
    "\1\112\4\0\6\112\1\0\2\112\6\0\26\112\1\u0121"+
    "\24\0\3\112\2\0\1\112\4\0\6\112\1\0\2\112"+
    "\6\0\14\112\1\u0122\12\112\24\0\3\112\2\0\1\112"+
    "\4\0\6\112\1\0\2\112\6\0\1\112\1\u0123\25\112"+
    "\24\0\3\112\2\0\1\112\4\0\6\112\1\0\2\112"+
    "\6\0\4\112\1\u0124\22\112\24\0\3\112\2\0\1\112"+
    "\4\0\6\112\1\0\2\112\6\0\1\u0125\26\112\24\0"+
    "\3\112\2\0\1\112\4\0\6\112\1\0\2\112\6\0"+
    "\7\112\1\u0126\17\112\24\0\3\112\2\0\1\112\4\0"+
    "\6\112\1\0\2\112\6\0\20\112\1\u0127\6\112\24\0"+
    "\3\112\2\0\1\112\4\0\6\112\1\0\2\112\6\0"+
    "\5\112\1\u0128\21\112\24\0\3\112\2\0\1\112\4\0"+
    "\6\112\1\0\2\112\6\0\14\112\1\u0129\12\112\24\0"+
    "\3\112\2\0\1\112\4\0\6\112\1\0\2\112\6\0"+
    "\1\112\1\u012a\25\112\24\0\3\112\2\0\1\112\4\0"+
    "\6\112\1\0\2\112\6\0\14\112\1\u012b\12\112\24\0"+
    "\3\112\2\0\1\112\4\0\6\112\1\0\2\112\6\0"+
    "\16\112\1\u012c\10\112\22\0\12\245\1\u012d\1\356\70\245"+
    "\13\357\1\u012e\70\357\5\123\1\250\4\123\1\251\10\123"+
    "\1\361\12\123\1\361\6\123\1\361\4\123\1\361\1\123"+
    "\1\361\27\123\2\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\5\10\1\u012f\21\10\24\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\1\u0130"+
    "\4\10\1\u0131\21\10\24\0\3\10\2\0\1\10\4\0"+
    "\6\10\1\0\2\10\6\0\1\10\1\u0132\25\10\24\0"+
    "\3\10\2\0\1\10\4\0\6\10\1\0\2\10\6\0"+
    "\1\10\1\u0133\25\10\24\0\3\10\2\0\1\10\4\0"+
    "\6\10\1\0\2\10\6\0\5\10\1\u0134\21\10\24\0"+
    "\3\10\2\0\1\10\4\0\6\10\1\0\2\10\6\0"+
    "\1\u0135\26\10\24\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\5\10\1\u0136\21\10\24\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\7\10"+
    "\1\u0137\17\10\24\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\5\10\1\u0138\21\10\24\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\5\10"+
    "\1\u0139\21\10\24\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\12\10\1\u013a\14\10\24\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\1\u013b\1\10\6\0"+
    "\27\10\24\0\3\10\2\0\1\10\4\0\6\10\1\0"+
    "\2\10\6\0\1\10\1\u013c\25\10\24\0\3\10\2\0"+
    "\1\10\4\0\6\10\1\0\2\10\6\0\14\10\1\u013d"+
    "\12\10\24\0\3\10\2\0\1\10\4\0\6\10\1\0"+
    "\2\10\6\0\15\10\1\u013e\11\10\24\0\3\10\2\0"+
    "\1\10\4\0\6\10\1\0\2\10\6\0\17\10\1\u013f"+
    "\7\10\24\0\3\10\2\0\1\10\4\0\6\10\1\0"+
    "\2\10\6\0\2\10\1\u0140\24\10\24\0\3\10\2\0"+
    "\1\10\4\0\6\10\1\0\2\10\6\0\10\10\1\u0141"+
    "\16\10\24\0\3\10\2\0\1\10\4\0\6\10\1\0"+
    "\2\10\6\0\6\10\1\u0142\20\10\24\0\3\10\2\0"+
    "\1\10\4\0\6\10\1\0\2\10\6\0\6\10\1\u0143"+
    "\20\10\24\0\3\10\2\0\1\10\4\0\6\10\1\0"+
    "\2\10\6\0\3\10\1\u0144\23\10\24\0\3\10\2\0"+
    "\1\10\4\0\6\10\1\0\2\10\6\0\22\10\1\u0145"+
    "\4\10\24\0\3\10\2\0\1\10\4\0\6\10\1\0"+
    "\2\10\6\0\21\10\1\u0146\5\10\24\0\3\10\2\0"+
    "\1\10\4\0\6\10\1\0\2\10\6\0\3\10\1\u0147"+
    "\23\10\24\0\3\10\2\0\1\10\4\0\6\10\1\0"+
    "\2\10\6\0\5\10\1\u0148\21\10\24\0\3\10\2\0"+
    "\1\10\4\0\6\10\1\0\2\10\6\0\16\10\1\u0149"+
    "\10\10\24\0\3\10\2\0\1\10\4\0\6\10\1\0"+
    "\2\10\6\0\5\10\1\u014a\21\10\24\0\3\10\2\0"+
    "\1\10\4\0\6\10\1\0\2\10\6\0\3\10\1\u014b"+
    "\23\10\75\0\1\u014c\64\0\1\u014d\51\0\3\112\2\0"+
    "\1\112\4\0\6\112\1\0\2\112\6\0\6\112\1\u014e"+
    "\20\112\24\0\3\112\2\0\1\112\4\0\6\112\1\0"+
    "\2\112\6\0\5\112\1\u014f\21\112\24\0\3\112\2\0"+
    "\1\112\4\0\6\112\1\0\2\112\6\0\3\112\1\u0150"+
    "\23\112\24\0\3\112\2\0\1\112\4\0\6\112\1\0"+
    "\2\112\6\0\1\112\1\u0151\25\112\24\0\3\112\2\0"+
    "\1\112\4\0\6\112\1\0\2\112\6\0\10\112\1\u0152"+
    "\16\112\24\0\3\112\2\0\1\112\4\0\6\112\1\0"+
    "\1\u0153\1\112\6\0\27\112\24\0\3\112\2\0\1\112"+
    "\4\0\6\112\1\0\2\112\6\0\13\112\1\u0154\13\112"+
    "\24\0\3\112\2\0\1\112\4\0\6\112\1\0\2\112"+
    "\6\0\12\112\1\u0155\14\112\24\0\3\112\2\0\1\112"+
    "\4\0\6\112\1\0\2\112\6\0\20\112\1\u0156\6\112"+
    "\24\0\3\112\2\0\1\112\4\0\6\112\1\0\2\112"+
    "\6\0\15\112\1\u0157\11\112\24\0\3\112\2\0\1\112"+
    "\4\0\6\112\1\0\2\112\6\0\12\112\1\u0158\14\112"+
    "\24\0\3\112\2\0\1\112\4\0\6\112\1\0\2\112"+
    "\6\0\6\112\1\u0159\20\112\24\0\3\112\2\0\1\112"+
    "\4\0\6\112\1\0\2\112\6\0\1\112\1\u015a\25\112"+
    "\24\0\3\112\2\0\1\112\4\0\6\112\1\0\2\112"+
    "\6\0\14\112\1\u015b\12\112\24\0\3\112\2\0\1\112"+
    "\4\0\6\112\1\0\2\112\6\0\1\112\1\u015c\25\112"+
    "\24\0\3\112\2\0\1\112\4\0\6\112\1\0\2\112"+
    "\6\0\14\112\1\u015d\12\112\24\0\3\112\2\0\1\112"+
    "\4\0\6\112\1\0\2\112\6\0\5\112\1\u015e\21\112"+
    "\24\0\3\112\2\0\1\112\4\0\6\112\1\0\2\112"+
    "\6\0\14\112\1\u015f\12\112\24\0\3\112\2\0\1\112"+
    "\4\0\6\112\1\0\2\112\6\0\7\112\1\u0160\17\112"+
    "\22\0\12\357\1\360\1\u012e\70\357\2\0\3\10\2\0"+
    "\1\10\4\0\6\10\1\0\2\10\6\0\10\10\1\u0161"+
    "\16\10\24\0\3\10\2\0\1\10\4\0\6\10\1\0"+
    "\2\10\6\0\1\u0162\26\10\24\0\3\10\2\0\1\10"+
    "\4\0\6\10\1\0\1\u0163\1\10\6\0\27\10\24\0"+
    "\3\10\2\0\1\10\4\0\6\10\1\0\2\10\6\0"+
    "\14\10\1\u0164\12\10\24\0\3\10\2\0\1\10\4\0"+
    "\6\10\1\0\2\10\6\0\1\10\1\u0165\25\10\24\0"+
    "\3\10\2\0\1\10\4\0\6\10\1\0\2\10\6\0"+
    "\11\10\1\u0166\15\10\24\0\3\10\2\0\1\10\4\0"+
    "\6\10\1\0\2\10\6\0\1\u0167\26\10\24\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\6\10"+
    "\1\u0168\20\10\24\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\13\10\1\u0169\13\10\24\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\3\10"+
    "\1\u016a\23\10\24\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\3\10\1\u016b\23\10\24\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\1\10"+
    "\1\u016c\25\10\24\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\1\10\1\u016d\25\10\24\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\14\10"+
    "\1\u016e\12\10\24\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\17\10\1\u016f\7\10\24\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\16\10"+
    "\1\u0170\10\10\24\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\1\u0171\26\10\24\0\3\10\2\0"+
    "\1\10\4\0\6\10\1\0\2\10\6\0\3\10\1\u0172"+
    "\23\10\24\0\3\10\2\0\1\10\4\0\6\10\1\0"+
    "\2\10\6\0\22\10\1\u0173\4\10\24\0\3\10\2\0"+
    "\1\10\4\0\6\10\1\0\2\10\6\0\16\10\1\u0174"+
    "\10\10\62\0\1\u0175\101\0\1\u0176\47\0\3\112\2\0"+
    "\1\112\4\0\6\112\1\0\2\112\6\0\20\112\1\u0177"+
    "\6\112\24\0\3\112\2\0\1\112\4\0\6\112\1\0"+
    "\2\112\6\0\23\112\1\u0178\3\112\24\0\3\112\2\0"+
    "\1\112\4\0\6\112\1\0\2\112\6\0\4\112\1\u0179"+
    "\22\112\24\0\3\112\2\0\1\112\4\0\6\112\1\0"+
    "\2\112\6\0\6\112\1\u017a\20\112\24\0\3\112\2\0"+
    "\1\112\4\0\6\112\1\0\2\112\6\0\10\112\1\u017b"+
    "\16\112\24\0\3\112\2\0\1\112\4\0\6\112\1\0"+
    "\2\112\6\0\3\112\1\u017c\23\112\24\0\3\112\2\0"+
    "\1\112\4\0\6\112\1\0\2\112\6\0\25\112\1\u017d"+
    "\1\112\24\0\3\112\2\0\1\112\4\0\6\112\1\0"+
    "\2\112\6\0\17\112\1\u017e\7\112\24\0\3\112\2\0"+
    "\1\112\4\0\6\112\1\0\2\112\6\0\13\112\1\u017f"+
    "\13\112\24\0\3\112\2\0\1\112\4\0\6\112\1\0"+
    "\1\112\1\u0180\6\0\27\112\24\0\3\112\2\0\1\112"+
    "\4\0\6\112\1\0\2\112\6\0\1\112\1\u0181\25\112"+
    "\24\0\1\112\1\u0182\1\112\2\0\1\112\4\0\6\112"+
    "\1\0\2\112\6\0\27\112\24\0\3\112\2\0\1\112"+
    "\4\0\6\112\1\0\2\112\6\0\1\112\1\u0183\25\112"+
    "\24\0\3\112\2\0\1\112\4\0\6\112\1\0\2\112"+
    "\6\0\13\112\1\u0184\13\112\24\0\3\112\2\0\1\112"+
    "\4\0\6\112\1\0\2\112\6\0\1\112\1\u0185\25\112"+
    "\24\0\3\10\2\0\1\10\4\0\6\10\1\0\2\10"+
    "\6\0\21\10\1\u0186\5\10\24\0\3\10\2\0\1\10"+
    "\4\0\6\10\1\0\2\10\6\0\1\10\1\u0187\25\10"+
    "\24\0\3\10\2\0\1\10\4\0\6\10\1\0\2\10"+
    "\6\0\6\10\1\u0188\20\10\24\0\3\10\2\0\1\10"+
    "\4\0\6\10\1\0\2\10\6\0\16\10\1\u0189\10\10"+
    "\24\0\3\10\2\0\1\10\4\0\6\10\1\0\2\10"+
    "\6\0\14\10\1\u018a\12\10\24\0\3\10\2\0\1\10"+
    "\4\0\6\10\1\0\2\10\6\0\16\10\1\u018b\10\10"+
    "\24\0\3\10\2\0\1\10\4\0\6\10\1\0\2\10"+
    "\6\0\20\10\1\u018c\6\10\24\0\3\10\2\0\1\10"+
    "\4\0\6\10\1\0\2\10\6\0\10\10\1\u018d\16\10"+
    "\24\0\3\10\2\0\1\10\4\0\6\10\1\0\2\10"+
    "\6\0\11\10\1\u018e\15\10\24\0\3\10\2\0\1\10"+
    "\4\0\6\10\1\0\2\10\6\0\1\10\1\u018f\25\10"+
    "\24\0\3\10\2\0\1\10\4\0\6\10\1\0\2\10"+
    "\6\0\1\10\1\u0190\25\10\24\0\3\10\2\0\1\10"+
    "\4\0\6\10\1\0\2\10\6\0\12\10\1\u0191\14\10"+
    "\24\0\3\10\2\0\1\10\4\0\6\10\1\0\2\10"+
    "\6\0\10\10\1\u0192\16\10\66\0\1\u0193\41\0\3\112"+
    "\2\0\1\112\4\0\6\112\1\0\2\112\6\0\1\112"+
    "\1\u0194\25\112\24\0\3\112\2\0\1\112\4\0\6\112"+
    "\1\0\2\112\6\0\12\112\1\u0195\14\112\24\0\3\112"+
    "\2\0\1\112\4\0\6\112\1\0\2\112\6\0\15\112"+
    "\1\u0196\11\112\24\0\3\112\2\0\1\112\4\0\6\112"+
    "\1\0\2\112\6\0\5\112\1\u0197\21\112\24\0\3\112"+
    "\2\0\1\112\4\0\6\112\1\0\2\112\6\0\12\112"+
    "\1\u0198\14\112\24\0\3\112\2\0\1\112\4\0\6\112"+
    "\1\0\2\112\6\0\1\u0199\26\112\24\0\3\112\2\0"+
    "\1\112\4\0\6\112\1\0\2\112\6\0\16\112\1\u019a"+
    "\10\112\24\0\3\112\2\0\1\112\4\0\6\112\1\0"+
    "\2\112\6\0\6\112\1\u019b\20\112\24\0\3\112\2\0"+
    "\1\112\4\0\6\112\1\0\2\112\6\0\5\112\1\u019c"+
    "\21\112\24\0\3\112\2\0\1\112\4\0\6\112\1\0"+
    "\2\112\6\0\20\112\1\u019d\6\112\24\0\3\112\2\0"+
    "\1\112\4\0\6\112\1\0\2\112\6\0\5\112\1\u019e"+
    "\21\112\24\0\3\10\2\0\1\10\4\0\6\10\1\0"+
    "\2\10\6\0\1\u019f\26\10\24\0\3\10\2\0\1\10"+
    "\4\0\6\10\1\0\2\10\6\0\16\10\1\u01a0\10\10"+
    "\24\0\3\10\2\0\1\10\4\0\6\10\1\0\2\10"+
    "\6\0\14\10\1\u01a1\12\10\24\0\3\10\2\0\1\10"+
    "\4\0\6\10\1\0\2\10\6\0\1\u01a2\26\10\24\0"+
    "\3\10\2\0\1\10\4\0\6\10\1\0\2\10\6\0"+
    "\1\10\1\u01a3\25\10\24\0\3\10\2\0\1\10\4\0"+
    "\6\10\1\0\2\10\6\0\1\10\1\u01a4\25\10\24\0"+
    "\3\112\2\0\1\112\4\0\6\112\1\0\2\112\6\0"+
    "\17\112\1\u01a5\7\112\24\0\3\112\2\0\1\112\4\0"+
    "\6\112\1\0\2\112\6\0\1\112\1\u01a6\25\112\24\0"+
    "\3\112\2\0\1\112\4\0\6\112\1\0\2\112\6\0"+
    "\3\112\1\u01a7\23\112\24\0\3\112\2\0\1\112\4\0"+
    "\6\112\1\0\2\112\6\0\12\112\1\u01a8\14\112\24\0"+
    "\3\112\2\0\1\112\4\0\6\112\1\0\2\112\6\0"+
    "\14\112\1\u01a9\12\112\24\0\3\112\2\0\1\112\4\0"+
    "\6\112\1\0\2\112\6\0\15\112\1\u01aa\11\112\24\0"+
    "\3\112\2\0\1\112\4\0\6\112\1\0\2\112\6\0"+
    "\6\112\1\u01ab\20\112\24\0\3\10\2\0\1\10\4\0"+
    "\6\10\1\0\2\10\6\0\14\10\1\u01ac\12\10\24\0"+
    "\3\10\2\0\1\10\4\0\6\10\1\0\2\10\6\0"+
    "\1\10\1\u01ad\25\10\24\0\3\112\2\0\1\112\4\0"+
    "\6\112\1\0\2\112\6\0\13\112\1\u01ae\13\112\24\0"+
    "\3\112\2\0\1\112\4\0\6\112\1\0\1\u01af\1\112"+
    "\6\0\27\112\24\0\3\112\2\0\1\112\4\0\6\112"+
    "\1\0\2\112\6\0\1\112\1\u01b0\25\112\24\0\3\112"+
    "\2\0\1\112\4\0\6\112\1\0\2\112\6\0\3\112"+
    "\1\u01b1\23\112\24\0\3\112\2\0\1\112\4\0\6\112"+
    "\1\0\2\112\6\0\10\112\1\u01b2\16\112\24\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\21\10"+
    "\1\u01b3\5\10\24\0\3\112\2\0\1\112\4\0\6\112"+
    "\1\0\2\112\6\0\10\112\1\u01b4\16\112\24\0\3\112"+
    "\2\0\1\112\4\0\6\112\1\0\2\112\6\0\10\112"+
    "\1\u01b5\16\112\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21420];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\4\1\1\11\7\1\4\11\21\1\6\11"+
    "\4\1\1\11\11\1\1\11\1\1\1\11\5\1\2\11"+
    "\1\1\3\0\1\1\1\0\2\1\2\11\1\1\1\0"+
    "\1\11\1\0\2\11\1\0\46\1\3\11\1\0\10\11"+
    "\1\1\2\11\2\0\1\11\1\1\1\11\1\1\2\0"+
    "\1\11\23\1\1\0\1\1\1\11\50\1\2\11\3\0"+
    "\1\11\25\1\1\0\1\1\1\11\45\1\1\11\2\0"+
    "\24\1\1\11\1\0\35\1\1\0\50\1\1\11\1\0"+
    "\34\1\1\11\42\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[437];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private static final class State {
        final int lBraceCount;
        final int state;

        public State(int state, int lBraceCount) {
            this.state = state;
            this.lBraceCount = lBraceCount;
        }

        @Override
        public String toString() {
            return "yystate = " + state + (lBraceCount == 0 ? "" : "lBraceCount = " + lBraceCount);
        }
    }

    private final Stack<State> states = new Stack<State>();
    private int lBraceCount;

    private int commentStart;
    private int commentDepth;

    private void pushState(int state) {
        states.push(new State(yystate(), lBraceCount));
        lBraceCount = 0;
        yybegin(state);
    }

    private String getStateName(int state) {
        if(state == SHORT_TEMPLATE_ENTRY) {
          return "SHORT_TEMPLATE_ENTRY";
        }
        if(state == LONG_TEMPLATE_ENTRY) {
          return "LONG_TEMPLATE_ENTRY";
        }
        if(state == QUO_STRING) {
          return "QUO_STRING";
        }
        if(state == APOS_STRING) {
          return "APOS_STRING";
        }
        return null;
    }

    private void popState() {
        State state = states.pop();
        lBraceCount = state.lBraceCount;
        yybegin(state.state);
    }

    public _HaxeLexer() {
      this((java.io.Reader)null);
    }


  public _HaxeLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _HaxeLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1324) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 127: 
          { return KSETTER;
          }
        case 141: break;
        case 46: 
          { return KIF ;
          }
        case 142: break;
        case 20: 
          { return OMINUS;
          }
        case 143: break;
        case 42: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return OCOMPLEMENT;
          }
        case 144: break;
        case 109: 
          { return KSWITCH ;
          }
        case 145: break;
        case 38: 
          { return MML_COMMENT;
          }
        case 146: break;
        case 26: 
          { return OBIT_AND;
          }
        case 147: break;
        case 24: 
          { return OQUEST;
          }
        case 148: break;
        case 5: 
          { return OQUOTIENT;
          }
        case 149: break;
        case 131: 
          { return KOVERRIDE;
          }
        case 150: break;
        case 87: 
          { return( KCAST );
          }
        case 151: break;
        case 140: 
          { return KPROTECTED;
          }
        case 152: break;
        case 56: 
          { return OCOND_OR;
          }
        case 153: break;
        case 95: 
          { return KTHROW ;
          }
        case 154: break;
        case 84: 
          { return KTRUE ;
          }
        case 155: break;
        case 3: 
          { return ID;
          }
        case 156: break;
        case 126: 
          { return KGETTER;
          }
        case 157: break;
        case 55: 
          { return OBIT_OR_ASSIGN;
          }
        case 158: break;
        case 39: 
          { return OQUOTIENT_ASSIGN;
          }
        case 159: break;
        case 60: 
          { return OSHIFT_LEFT;
          }
        case 160: break;
        case 105: 
          { return KIMPORT ;
          }
        case 161: break;
        case 80: 
          { return KNULL ;
          }
        case 162: break;
        case 116: 
          { return( KEXTENDS );
          }
        case 163: break;
        case 81: 
          { return( KENUM );
          }
        case 164: break;
        case 15: 
          { return PRBRACK;
          }
        case 165: break;
        case 50: 
          { return OARROW;
          }
        case 166: break;
        case 1: 
          { yybegin(YYINITIAL); return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 167: break;
        case 14: 
          { return PLBRACK;
          }
        case 168: break;
        case 96: 
          { return KCATCH;
          }
        case 169: break;
        case 64: 
          { pushState(LONG_TEMPLATE_ENTRY); return LONG_TEMPLATE_ENTRY_START;
          }
        case 170: break;
        case 106: 
          { return KINLINE;
          }
        case 171: break;
        case 136: 
          { return KCOREAPI;
          }
        case 172: break;
        case 122: 
          { return( KPACKAGE );
          }
        case 173: break;
        case 110: 
          { return KSTATIC;
          }
        case 174: break;
        case 85: 
          { return KTHIS ;
          }
        case 175: break;
        case 48: 
          { return( KTO );
          }
        case 176: break;
        case 138: 
          { return( KIMPLEMENTS );
          }
        case 177: break;
        case 103: 
          { return KHACK;
          }
        case 178: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 179: break;
        case 36: 
          { return MACRO_ID;
          }
        case 180: break;
        case 134: 
          { return( KINTERFACE );
          }
        case 181: break;
        case 44: 
          { return OPLUS_ASSIGN;
          }
        case 182: break;
        case 68: 
          { return REG_EXP;
          }
        case 183: break;
        case 28: 
          { return OBIT_XOR;
          }
        case 184: break;
        case 43: 
          { return OPLUS_PLUS;
          }
        case 185: break;
        case 132: 
          { return KNODEBUG;
          }
        case 186: break;
        case 104: 
          { return KEXTERN;
          }
        case 187: break;
        case 62: 
          { return OREMAINDER_ASSIGN;
          }
        case 188: break;
        case 93: 
          { return KFALSE ;
          }
        case 189: break;
        case 113: 
          { return KBUILD;
          }
        case 190: break;
        case 41: 
          { return LITOCT;
          }
        case 191: break;
        case 4: 
          { return OCOLON;
          }
        case 192: break;
        case 77: 
          { return OSHIFT_LEFT_ASSIGN;
          }
        case 193: break;
        case 99: 
          { return PPELSE;
          }
        case 194: break;
        case 59: 
          { return OLESS_OR_EQUAL;
          }
        case 195: break;
        case 75: 
          { return KVAR;
          }
        case 196: break;
        case 37: 
          { return MSL_COMMENT;
          }
        case 197: break;
        case 101: 
          { return KBIND;
          }
        case 198: break;
        case 9: 
          { return ODOT;
          }
        case 199: break;
        case 51: 
          { return OMINUS_ASSIGN;
          }
        case 200: break;
        case 128: 
          { return( KABSTRACT );
          }
        case 201: break;
        case 115: 
          { return KFINAL;
          }
        case 202: break;
        case 88: 
          { return PPEND;
          }
        case 203: break;
        case 27: 
          { return OLESS;
          }
        case 204: break;
        case 67: 
          { return LITHEX;
          }
        case 205: break;
        case 65: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { return LITFLOAT;
          }
        case 206: break;
        case 107: 
          { return KRETURN ;
          }
        case 207: break;
        case 17: 
          { return PRPAREN;
          }
        case 208: break;
        case 35: 
          { if (lBraceCount == 0) {
                                                popState();
                                                return LONG_TEMPLATE_ENTRY_END;
                                              }
                                              lBraceCount--;
                                              return PRCURLY;
          }
        case 209: break;
        case 70: 
          { return ONEW;
          }
        case 210: break;
        case 49: 
          { return OMINUS_MINUS;
          }
        case 211: break;
        case 16: 
          { return PLPAREN;
          }
        case 212: break;
        case 139: 
          { return KAUTOBUILD;
          }
        case 213: break;
        case 108: 
          { return KPUBLIC;
          }
        case 214: break;
        case 33: 
          { popState(); return ID;
          }
        case 215: break;
        case 100: 
          { return KMETA;
          }
        case 216: break;
        case 71: 
          { return KFOR ;
          }
        case 217: break;
        case 25: 
          { return OBIT_OR;
          }
        case 218: break;
        case 124: 
          { return KNATIVE;
          }
        case 219: break;
        case 118: 
          { return KDYNAMIC;
          }
        case 220: break;
        case 117: 
          { return( KDEFAULT );
          }
        case 221: break;
        case 21: 
          { return OGREATER;
          }
        case 222: break;
        case 90: 
          { return KNEVER;
          }
        case 223: break;
        case 73: 
          { return KGET;
          }
        case 224: break;
        case 19: 
          { return OCOMMA;
          }
        case 225: break;
        case 129: 
          { return( KFUNCTION );
          }
        case 226: break;
        case 98: 
          { return KSUPER ;
          }
        case 227: break;
        case 32: 
          { popState(); return CLOSING_QUOTE;
          }
        case 228: break;
        case 53: 
          { return OEQ;
          }
        case 229: break;
        case 47: 
          { return KDO ;
          }
        case 230: break;
        case 137: 
          { return KOVERLOAD;
          }
        case 231: break;
        case 133: 
          { return KREQUIRE;
          }
        case 232: break;
        case 121: 
          { return KPRIVATE;
          }
        case 233: break;
        case 76: 
          { return OSHIFT_RIGHT_ASSIGN;
          }
        case 234: break;
        case 23: 
          { return ONOT;
          }
        case 235: break;
        case 72: 
          { return KTRY;
          }
        case 236: break;
        case 13: 
          { return PRCURLY;
          }
        case 237: break;
        case 30: 
          { return REGULAR_STRING_PART;
          }
        case 238: break;
        case 123: 
          { return PPELSEIF;
          }
        case 239: break;
        case 89: 
          { popState(); return KTHIS;
          }
        case 240: break;
        case 86: 
          { return( KCASE );
          }
        case 241: break;
        case 12: 
          { return PLCURLY;
          }
        case 242: break;
        case 97: 
          { return( KCLASS );
          }
        case 243: break;
        case 112: 
          { return KMACRO;
          }
        case 244: break;
        case 114: 
          { return KDEBUG;
          }
        case 245: break;
        case 22: 
          { return OASSIGN;
          }
        case 246: break;
        case 52: 
          { return OGREATER_OR_EQUAL;
          }
        case 247: break;
        case 6: 
          { return OMUL;
          }
        case 248: break;
        case 58: 
          { return OCOND_AND;
          }
        case 249: break;
        case 94: 
          { return KUSING ;
          }
        case 250: break;
        case 54: 
          { return ONOT_EQ;
          }
        case 251: break;
        case 10: 
          { pushState(QUO_STRING); return OPEN_QUOTE;
          }
        case 252: break;
        case 135: 
          { return KFAKEENUM;
          }
        case 253: break;
        case 91: 
          { return KWHILE ;
          }
        case 254: break;
        case 57: 
          { return OBIT_AND_ASSIGN;
          }
        case 255: break;
        case 8: 
          { return OPLUS;
          }
        case 256: break;
        case 34: 
          { lBraceCount++; return PLCURLY;
          }
        case 257: break;
        case 82: 
          { return KELSE ;
          }
        case 258: break;
        case 31: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 259: break;
        case 7: 
          { return LITINT;
          }
        case 260: break;
        case 66: 
          { return DOC_COMMENT;
          }
        case 261: break;
        case 130: 
          { return KCONTINUE ;
          }
        case 262: break;
        case 74: 
          { return KSET;
          }
        case 263: break;
        case 79: 
          { return KNS;
          }
        case 264: break;
        case 83: 
          { return( KFROM);
          }
        case 265: break;
        case 125: 
          { return KBITMAP;
          }
        case 266: break;
        case 119: 
          { return KUNTYPED;
          }
        case 267: break;
        case 102: 
          { return KKEEP;
          }
        case 268: break;
        case 92: 
          { return( KBREAK );
          }
        case 269: break;
        case 18: 
          { return OSEMI;
          }
        case 270: break;
        case 29: 
          { return OREMAINDER;
          }
        case 271: break;
        case 40: 
          { return OMUL_ASSIGN;
          }
        case 272: break;
        case 45: 
          { return OIN;
          }
        case 273: break;
        case 11: 
          { pushState(APOS_STRING); return OPEN_QUOTE;
          }
        case 274: break;
        case 120: 
          { return KTYPEDEF;
          }
        case 275: break;
        case 111: 
          { return PPERROR;
          }
        case 276: break;
        case 61: 
          { return OBIT_XOR_ASSIGN;
          }
        case 277: break;
        case 63: 
          { pushState(SHORT_TEMPLATE_ENTRY);
                                                                  yypushback(yylength() - 1);
                                                                  return SHORT_TEMPLATE_ENTRY_START;
          }
        case 278: break;
        case 69: 
          { return OTRIPLE_DOT;
          }
        case 279: break;
        case 78: 
          { return PPIF;
          }
        case 280: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
