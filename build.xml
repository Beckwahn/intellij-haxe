<project name="Idea Haxe language scripted package plugin" default="package" basedir=".">

    <!-- This description is displayed when -projecthelp is added to the ant command line. -->
    <description>
      This project builds the haxe plugin for IDEA.  The output
      is a jar file "intellij-haxe.jar" that must be enabled via
      the "File->Settings" dialog, "plugins" tab, "load file from disk".

      If build errors occur, it is likely that your system is not set up
      identically to what these scripts expect.  You may override any
      setting locally by creating a file in the project root directory
      called "local-build-overrides.xml".  (Do NOT check it into the
      repository!  It will break continuous integration builds.)  An
      example file that can be run from inside IDEA would look like:

          &lt;project name="local-overrides"&gt;
            &lt;echo&gt;
              Including local overrides...
            &lt;/echo&gt;

            &lt;condition property="idea.home.maybe" value="$${ant.home}/../.."&gt;
              &lt;matches pattern=".*/lib/ant" string="$${ant.home}"/&gt;
            &lt;/condition&gt;
            &lt;condition property="idea.ultimate.build" value="$${idea.home.maybe}"&gt;
              &lt;resourceexists&gt;
                &lt;file file="$${idea.home.maybe}/build.txt"/&gt;
              &lt;/resourceexists&gt;
            &lt;/condition&gt;

            &lt;echo &gt;Installation found at $${idea.ultimate.build}&lt;/echo&gt;
          &lt;/project&gt;

      Or, more simply:
          &lt;project name="local-overrides"&gt;
            &lt;property name="idea.ultimate.build" location="/home/username/intellij_idea/idea-IU-135.1286/" /&gt;
          &lt;/project&gt;


    </description>

    <!-- Import local developer overrides, if they exist. -->
    <dirname property="project.dir" file="${ant.file}"/>
    <import file="${project.dir}/local-build-overrides.xml" optional="true"/>

    <!-- set global properties for this build -->
    <property name="build.compiler" value="modern"/>
    <property name="idea.ultimate.build" location="${basedir}/idea-IU/" />

    <!-- At this point, if we don't have a proper installation of IDEA,
         then we won't get anywhere.  Put up a sensible error. -->
    <fail>
      <condition>
        <not>
          <resourceexists>
            <file file="${idea.ultimate.build}/build.txt"/>
          </resourceexists>
        </not>
      </condition>
      IDEA installation not found.

      Either '${idea.ultimate.build}' does not exist, or it does not appear
      to be a normal IDEA installation.  (It should contain a build.txt file.)
      See the description section at the top of this file for more
      information.
    </fail>

    <!-- the version of intellij we are using as the SDK. -->
    <loadfile property="idea.sdk.version" srcFile="${idea.ultimate.build}/build.txt"/>
    <echo level="info">Using installed IDEA version of ${idea.sdk.version}</echo>

    <condition property="plugin.properties.file" value="idea_v14.properties">
      <matches pattern="-139." string="${idea.sdk.version}"/>
    </condition>
    <condition property="plugin.properties.file" value="idea_v13.properties">
      <matches pattern="-135." string="${idea.sdk.version}"/>
    </condition>
    <echo>Idea property file is ${plugin.properties.file}</echo>

    <fail unless="plugin.properties.file">
      Could not detect IDEA version.
      Does the idea.ultimate.build property point to your IDEA installation?
      Perhaps you need to set up a local-build-overrides file?
      See the description section at the top of this file for more information.
    </fail>

    <!-- The properties are mostly used as filters, but they can be useful for other things. -->
    <property file="${plugin.properties.file}"/>

    <!-- defines a path for code specific to an intellij version.
       intellij SDK has non-backward compatible changes which requires
       some duplicated Java files.

       This property defaults to "src" if missing, this way you can
       choose not to include any version specific code -->
    <property name="version.specific.code.location" location="src" />

    <!-- javac2 is an intellij ant task to wrap the java compiler and add
         support to .form files and @NotNull annotations, among others -->
    <taskdef name="javac2" classname="com.intellij.ant.Javac2">
        <classpath>
            <pathelement location="${idea.ultimate.build}/lib/javac2.jar"/>
            <pathelement location="${idea.ultimate.build}/lib/forms_rt.jar"/>
            <pathelement location="${idea.ultimate.build}/lib/asm-all.jar"/>
            <fileset dir="${idea.ultimate.build}/lib" includes="**/*.jar" />
            <fileset dir="${idea.ultimate.build}/plugins" includes="**/**.jar" />
        </classpath>
    </taskdef>

    <target name="clean" description="clean up">
        <delete dir="build" />
    </target>

    <target name="init">
        <tstamp/>
        <mkdir dir="build"/>
        <echo message="Using IDEA build from: ${idea.ultimate.build}" />
        <echo message="Using JAVA_HOME: ${java.home}" />
    </target>


    <target name="metainf" description="Copy and update META-INF files with version-specific information">
      <!-- Need to overwrite always.  Otherwise, copied files are newer and
           won't be updated between build types (versions). -->
      <copy todir="build/src/META-INF" overwrite="true" verbose="true">
          <fileset dir="src/META-INF"/>
          <filterset>
            <filtersfile file="${plugin.properties.file}"/>
            <!-- An odd construction, but it allows using a property in the filtered file. -->
            <filter token="idea.sdk.version" value="${idea.sdk.version}"/>
          </filterset>
        </copy>
    </target>


    <target name="compile" depends="clean,init" description="Compile tests">
        <echo level="warning">
          Using IDEA release at: ${idea.ultimate.build}
        </echo>

        <javac2
            destdir="build"
            verbose="false"
            debug="true"
            source="1.6"
            target="1.6"
            includeantruntime="false" >

            <src path="${version.specific.code.location}" />
            <src path="src" />
            <src path="gen" />
            <src path="common/src" />
            <src path="hxcpp-debugger-protocol" />
            <classpath>
                <fileset dir="${idea.ultimate.build}/lib" includes="**/*.jar" />
                <fileset dir="${idea.ultimate.build}/plugins" includes="**/**.jar" />
            </classpath>
        </javac2>

    </target>

    <target name="package" depends="compile,metainf" description="Generate JAR file">
        <jar jarfile="intellij-haxe-${idea.version}.jar" update="true">
            <fileset dir="resources" />
            <fileset dir="build" includes="**/*.*" excludes="src/META-INF/*.*"/>
            <fileset dir="build/src" includes="META-INF/*.*"/>
            <fileset dir="common/src" includes="**/*.*" excludes="**/*.java"/>
            <fileset dir="src" >
              <include name="com/**"/>
              <exclude name="**/*.java"/>
            </fileset>
        </jar>

    </target>

</project>

