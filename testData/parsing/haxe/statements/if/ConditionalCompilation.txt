Haxe File
  PsiJavaToken:CONDITIONAL_STATEMENT_ID('#if flash8')
  PsiJavaToken:MSL_COMMENT('// Haxe code specific for flash player 8')
  PsiJavaToken:CONDITIONAL_STATEMENT_ID('#elseif flash')
  PsiJavaToken:MSL_COMMENT('// Haxe code specific for flash platform (any version)')
  PsiJavaToken:CONDITIONAL_STATEMENT_ID('#elseif js')
  PsiJavaToken:MSL_COMMENT('// Haxe code specific for javascript plaform')
  PsiJavaToken:#else('#else')
  PsiJavaToken:MSL_COMMENT('// do something else')
  PsiJavaToken:#error('#error // will display an error "Not implemented on this platform"\n  #error "Custom error message" ')
  PsiJavaToken:MSL_COMMENT('// will display an error "Custom error message"')
  PsiJavaToken:#end('#end')
  PsiJavaToken:CONDITIONAL_STATEMENT_ID('#if mydebug')
  CLASS_DECLARATION
    PsiJavaToken:class('class')
    COMPONENT_NAME
      IDENTIFIER
        PsiJavaToken:ID('Crazy')
    PsiJavaToken:{('{')
    PsiComment(#else)('#else\n  interface Crazy {\n  #end')
    PsiComment(MSL_COMMENT)('// yep')
    CLASS_BODY
      <empty list>
    PsiJavaToken:}('}')
  CLASS_DECLARATION
    PsiJavaToken:class('class')
    COMPONENT_NAME
      IDENTIFIER
        PsiJavaToken:ID('ConditionalCompilation')
    PsiJavaToken:{('{')
    PsiComment(#if)('#if')
    PsiComment(PPEXPRESSION)(' !debug ')
    CLASS_BODY
      FUNCTION_DECLARATION_WITH_ATTRIBUTES
        DECLARATION_ATTRIBUTE
          PsiJavaToken:inline('inline')
        PsiComment(#end)('#end')
        DECLARATION_ATTRIBUTE
          ACCESS
            PsiJavaToken:public('public')
        PsiJavaToken:function('function')
        COMPONENT_NAME
          IDENTIFIER
            PsiJavaToken:ID('abc')
        PsiJavaToken:(('(')
        PsiJavaToken:)(')')
        BLOCK_STATEMENT
          PsiJavaToken:{('{')
          PsiJavaToken:}('}')
    PsiJavaToken:}('}')
  PsiComment(#if)('#if')
  PsiComment(PPEXPRESSION)(' (neko && mydebug)\n')
  CLASS_DECLARATION
    PsiJavaToken:class('class')
    COMPONENT_NAME
      IDENTIFIER
        PsiJavaToken:ID('FooNeko')
    PsiJavaToken:{('{')
    CLASS_BODY
      <empty list>
    PsiJavaToken:}('}')
  PsiComment(MSL_COMMENT)('// Only for "mydebug" mode on Neko')
  PsiComment(#end)('#end')
  PsiComment(#if)('#if')
  PsiComment(PPEXPRESSION)(' (flash || php)\n')
  PsiComment(PPBODY)('// Code that works for either flash or PHP\nclass FooFlash {\n\n}\n#end')
  PsiComment(#if)('#if')
  PsiComment(PPEXPRESSION)(' (neko && mydebug)\n')
  TYPEDEF_DECLARATION
    PsiJavaToken:typedef('typedef')
    COMPONENT_NAME
      IDENTIFIER
        PsiJavaToken:ID('Vector')
    PsiJavaToken:=('=')
    TYPE_OR_ANONYMOUS
      TYPE
        REFERENCE_EXPRESSION
          REFERENCE_EXPRESSION
            REFERENCE_EXPRESSION
              IDENTIFIER
                PsiJavaToken:ID('com')
            PsiJavaToken:.('.')
            REFERENCE_EXPRESSION
              IDENTIFIER
                PsiJavaToken:ID('foo')
          PsiJavaToken:.('.')
          REFERENCE_EXPRESSION
            IDENTIFIER
              PsiJavaToken:ID('SuperArray')
    PsiJavaToken:;(';')
  PsiComment(MSL_COMMENT)('// Only for "mydebug" mode on Neko')
  PsiComment(#end)('#end')
  CLASS_DECLARATION
    PsiJavaToken:class('class')
    COMPONENT_NAME
      IDENTIFIER
        PsiJavaToken:ID('ConditionalCompilation')
    PsiJavaToken:{('{')
    CLASS_BODY
      FUNCTION_DECLARATION_WITH_ATTRIBUTES
        PsiJavaToken:function('function')
        COMPONENT_NAME
          IDENTIFIER
            PsiJavaToken:ID('foo')
        PsiJavaToken:(('(')
        PsiJavaToken:)(')')
        BLOCK_STATEMENT
          PsiJavaToken:{('{')
          PsiComment(#if)('#if')
          PsiComment(PPEXPRESSION)(' (neko && php) || (neko && mydebug)\n    ')
          CALL_EXPRESSION
            REFERENCE_EXPRESSION
              IDENTIFIER
                PsiJavaToken:ID('trace')
            PsiJavaToken:(('(')
            EXPRESSION_LIST
              STRING_LITERAL_EXPRESSION
                PsiJavaToken:OPEN_QUOTE('"')
                PsiJavaToken:REGULAR_STRING_PART('Debug infos for all debug compiles')
                PsiJavaToken:CLOSING_QUOTE('"')
            PsiJavaToken:)(')')
          PsiJavaToken:;(';')
          PsiComment(#end)('#end')
          PsiJavaToken:}('}')
    PsiJavaToken:}('}')