Haxe File
  HaxePsiToken:CONDITIONAL_STATEMENT_ID('#if flash8')
  HaxePsiToken:MSL_COMMENT('// Haxe code specific for flash player 8')
  HaxePsiToken:CONDITIONAL_STATEMENT_ID('#elseif flash')
  HaxePsiToken:MSL_COMMENT('// Haxe code specific for flash platform (any version)')
  HaxePsiToken:CONDITIONAL_STATEMENT_ID('#elseif js')
  HaxePsiToken:MSL_COMMENT('// Haxe code specific for javascript plaform')
  HaxePsiToken:#else('#else')
  HaxePsiToken:MSL_COMMENT('// do something else')
  HaxePsiToken:#error('#error // will display an error "Not implemented on this platform"\n  #error "Custom error message" ')
  HaxePsiToken:MSL_COMMENT('// will display an error "Custom error message"')
  HaxePsiToken:#end('#end')
  HaxePsiToken:CONDITIONAL_STATEMENT_ID('#if mydebug')
  CLASS_DECLARATION
    HaxePsiToken:class('class')
    COMPONENT_NAME
      IDENTIFIER
        HaxePsiToken:ID('Crazy')
    HaxePsiToken:{('{')
    PsiComment(#else)('#else\n  interface Crazy {\n  #end')
    PsiComment(MSL_COMMENT)('// yep')
    CLASS_BODY
      <empty list>
    HaxePsiToken:}('}')
  CLASS_DECLARATION
    HaxePsiToken:class('class')
    COMPONENT_NAME
      IDENTIFIER
        HaxePsiToken:ID('ConditionalCompilation')
    HaxePsiToken:{('{')
    PsiComment(#if)('#if')
    PsiComment(PPEXPRESSION)(' !debug ')
    CLASS_BODY
      FUNCTION_DECLARATION_WITH_ATTRIBUTES
        DECLARATION_ATTRIBUTE
          HaxePsiToken:inline('inline')
        PsiComment(#end)('#end')
        DECLARATION_ATTRIBUTE
          ACCESS
            HaxePsiToken:public('public')
        HaxePsiToken:function('function')
        COMPONENT_NAME
          IDENTIFIER
            HaxePsiToken:ID('abc')
        HaxePsiToken:(('(')
        HaxePsiToken:)(')')
        BLOCK_STATEMENT
          HaxePsiToken:{('{')
          HaxePsiToken:}('}')
    HaxePsiToken:}('}')
  PsiComment(#if)('#if')
  PsiComment(PPEXPRESSION)(' (neko && mydebug)\n')
  CLASS_DECLARATION
    HaxePsiToken:class('class')
    COMPONENT_NAME
      IDENTIFIER
        HaxePsiToken:ID('FooNeko')
    HaxePsiToken:{('{')
    CLASS_BODY
      <empty list>
    HaxePsiToken:}('}')
  PsiComment(MSL_COMMENT)('// Only for "mydebug" mode on Neko')
  PsiComment(#end)('#end')
  PsiComment(#if)('#if')
  PsiComment(PPEXPRESSION)(' (flash || php)\n')
  PsiComment(PPBODY)('// Code that works for either flash or PHP\nclass FooFlash {\n\n}\n#end')
  PsiComment(#if)('#if')
  PsiComment(PPEXPRESSION)(' (neko && mydebug)\n')
  TYPEDEF_DECLARATION
    HaxePsiToken:typedef('typedef')
    COMPONENT_NAME
      IDENTIFIER
        HaxePsiToken:ID('Vector')
    HaxePsiToken:=('=')
    TYPE_OR_ANONYMOUS
      TYPE
        REFERENCE_EXPRESSION
          REFERENCE_EXPRESSION
            REFERENCE_EXPRESSION
              IDENTIFIER
                HaxePsiToken:ID('com')
            HaxePsiToken:.('.')
            REFERENCE_EXPRESSION
              IDENTIFIER
                HaxePsiToken:ID('foo')
          HaxePsiToken:.('.')
          REFERENCE_EXPRESSION
            IDENTIFIER
              HaxePsiToken:ID('SuperArray')
    HaxePsiToken:;(';')
  PsiComment(MSL_COMMENT)('// Only for "mydebug" mode on Neko')
  PsiComment(#end)('#end')
  CLASS_DECLARATION
    HaxePsiToken:class('class')
    COMPONENT_NAME
      IDENTIFIER
        HaxePsiToken:ID('ConditionalCompilation')
    HaxePsiToken:{('{')
    CLASS_BODY
      FUNCTION_DECLARATION_WITH_ATTRIBUTES
        HaxePsiToken:function('function')
        COMPONENT_NAME
          IDENTIFIER
            HaxePsiToken:ID('foo')
        HaxePsiToken:(('(')
        HaxePsiToken:)(')')
        BLOCK_STATEMENT
          HaxePsiToken:{('{')
          PsiComment(#if)('#if')
          PsiComment(PPEXPRESSION)(' (neko && php) || (neko && mydebug)\n    ')
          CALL_EXPRESSION
            REFERENCE_EXPRESSION
              IDENTIFIER
                HaxePsiToken:ID('trace')
            HaxePsiToken:(('(')
            EXPRESSION_LIST
              STRING_LITERAL_EXPRESSION
                HaxePsiToken:OPEN_QUOTE('"')
                HaxePsiToken:REGULAR_STRING_PART('Debug infos for all debug compiles')
                HaxePsiToken:CLOSING_QUOTE('"')
            HaxePsiToken:)(')')
          HaxePsiToken:;(';')
          PsiComment(#end)('#end')
          HaxePsiToken:}('}')
    HaxePsiToken:}('}')